-- ffi setup 
local ffi = require("ffi")
local C = ffi.C

local L = require("extensions.rkn_configio.configio_lib")
local Utils = require("extensions.rkn_configio.utils")

local config = {
	stationKey = "station",
	stationLoadoutKey = "station_loadout",
	shipKey = "ship",
	shipLoadoutKey = "ship_loadout",
	folderIdFormat = "rkn_configio.folder.%s.%s",
	settingsBlackboardId = "$RKN_ConfigioSettings",
	autoPresetsBlackboardId = "$RKN_ConfigioAutoPresets",
	loadWidthMultiplier = 0.8,
	maxFolders = 6,
	stationLoadHeight = 0.5 * Helper.viewHeight,
	stationLoadoutLoadHeight = 0.35 * Helper.viewHeight,
	loadSettingsWidth = Helper.scaleX(300),
	settingsBrowserSeparation = Helper.borderSize * 10,
	browserHeaderTextProperties = {
		font = Helper.headerRow1Font,
		fontsize = Helper.headerRow1FontSize,
		x = Helper.headerRow1Offsetx,
		y = math.floor((Helper.scaleY(30) - Helper.scaleY(Helper.headerRow1Height)) / 2 + Helper.scaleY(Helper.headerRow1Offsety)),
		height = Helper.scaleY(30),
		halign = "center",
		cellBGColor = Color["row_background"],
		titleColor = Color["row_title"],
	},
	folderTextProperties = {
		font = Helper.titleFont,
		fontsize = Helper.standardFontSize,
		height = Helper.subHeaderHeight,
		cellBGColor = Color["row_background"],
		titleColor = { r = 128, g = 128, b = 128, a = 100 }
	},
	planTextProperties = {
		height = math.floor(Helper.standardTextHeight + Helper.scaleY(1) * 2),
		y = math.floor(Helper.scaleY(1)),
	},
	inactiveColor = { r = 128, g = 128, b = 128, a = 100 }, -- dark gray
	autoPresetColor = { r = 100, g = 225, b = 0, a = 100 }, -- green
	partialPresetColor = { r = 255, g = 100, b = 0, a = 100 }, -- orange
	shipSortOptions = {
		{ id = "default", text = ReadText(1811143915, 92), displayremoveoption = false, icon = "" },
		{ id = "name", text = ReadText(1811143915, 91), displayremoveoption = false, icon = "" }
	},
	defaultSortOptions = {
		{ id = "name", text = ReadText(1811143915, 91), displayremoveoption = false, icon = "" }
	},
	valueOptions = {
		{ id = "low", text = ReadText(1811143915, 71), icon = "", displayremoveoption = false },
		{ id = "medium", text = ReadText(1811143915, 72), icon = "", displayremoveoption = false },
		{ id = "high", text = ReadText(1811143915, 73), icon = "", displayremoveoption = false }
	},
	dockingComputerOptions = {
		{ id = "none", text = "None", icon = "", displayremoveoption = false },
		{ id = "software_dockmk1", text = "Mk1", icon = "", displayremoveoption = false },
		{ id = "software_dockmk2", text = "Mk2", icon = "", displayremoveoption = false }
	},
	longRangeScannerOptions = {
		{ id = "software_scannerlongrangemk1", text = "Mk1", icon = "", displayremoveoption = false },
		{ id = "software_scannerlongrangemk2", text = "Mk2", icon = "", displayremoveoption = false }
	},
	objectScannerOptions = {
		{ id = "software_scannerobjectmk1", text = "Basic", icon = "", displayremoveoption = false },
		{ id = "software_scannerobjectmk2", text = "Police", icon = "", displayremoveoption = false }
	},
	targetingComputerOptions = {
		{ id = "none", text = "None", icon = "", displayremoveoption = false },
		{ id = "software_targetmk1", text = "Mk1", icon = "", displayremoveoption = false }
	},
	tradingComputerOptions = {
		{ id = "none", text = "None", icon = "", displayremoveoption = false },
		{ id = "software_trademk1", text = "Mk1", icon = "", displayremoveoption = false }
	}
}


local function init()
	L.params = {}

	-- Set settings for extension options menu on game start --
	L.getLoadSettings(1)
	SetNPCBlackboard(L.getPlayerId(), config.settingsBlackboardId, L.settings)
end


function L.createStationTitleBarButton(row, menu, sc_config, loadOptions)
	if L.isModEnabledForType(config.stationKey) then
		row[2]:createButton({ helpOverlayID = "open_constructionplan_browser", helpOverlayText = " ", helpOverlayHighlightOnly = true, active = true, height = menu.titleData.height }):setText(ReadText(1811143915, 1), { halign = "center" })
		row[2].handlers.onClick = function() L.buttonStationTitleLoad(menu, sc_config.contextLayer) end
	else
		row[2]:createDropDown(loadOptions, { textOverride = ReadText(1001, 7904), optionWidth = menu.titleData.dropdownWidth + menu.titleData.height + Helper.borderSize }):setTextProperties(sc_config.dropDownTextProperties)
		row[2].handlers.onDropDownConfirmed = menu.dropdownLoad
		row[2].handlers.onDropDownRemoved = menu.dropdownRemovedCP
	end
end

function L.createRefreshStationTitleBarButton(menu, text, loadOptions)
	-- No need for refreshing if enabled --
	if not L.isModEnabledForType(config.stationKey) then
		local desc = Helper.createDropDown(loadOptions, "", text, nil, true, true, 0, 0, 0, 0, nil, nil, "", menu.titleData.dropdownWidth + menu.titleData.height + Helper.borderSize)
		Helper.setCellContent(menu, menu.titlebartable, desc, 1, 2, nil, "dropdown", nil, nil, menu.dropdownLoad, menu.dropdownRemovedCP)
	end
end

function L.createStationLoadoutTitleBarButton(row, menu, sc_config, loadoutOptions)
	if L.isModEnabledForType(config.stationLoadoutKey) then
		row[2]:setColSpan(6):createButton({ helpOverlayText = " ", helpOverlayHighlightOnly = true, active = true, height = menu.titleData.height }):setText(ReadText(1811143915, 22), { halign = "center" })
		row[2].handlers.onClick = function() L.buttonStationLoadoutTitleLoad(menu, sc_config.contextLayer) end
	else
		row[2]:setColSpan(6):createDropDown(loadoutOptions, { textOverride = ReadText(1001, 7905), optionWidth = menu.titleData.dropdownWidth + 6 * (menu.titleData.height + Helper.borderSize) }):setTextProperties(sc_config.dropDownTextProperties)
		row[2].handlers.onDropDownConfirmed = menu.dropdownLoadout
		row[2].handlers.onDropDownRemoved = menu.dropdownRemovedLoadout
	end
end

function L.createRefreshStationLoadoutTitleBarButton(menu, text, loadoutOptions)
	-- No need for refreshing if enabled --
	if not L.isModEnabledForType(config.stationKey) then
		local desc = Helper.createDropDown(loadoutOptions, "", text, nil, true, next(menu.loadouts) ~= nil, 0, 0, 0, 0, nil, nil, "", menu.titleData.dropdownWidth + 4 * (menu.titleData.height + Helper.borderSize))
		Helper.setCellContent(menu, menu.titlebartable, desc, 1, 2, nil, "dropdown", nil, nil, menu.dropdownLoadout, menu.dropdownRemovedLoadout)
	end
end

function L.createShipTitleBarButton(row, menu, sc_config, classOptions, shipOptions, curShipOption)
	if L.isModEnabledForType(config.shipKey) and menu.mode ~= "upgrade" then
		local shipOptions = L.createShipOptions(menu)
		local dropdownDummy = { properties = { text = { }, icon = {} } }
		local text = ReadText(1811143915, 30)
		local mouseOverText = ""
		if menu.macro and menu.macro ~= "" then
			for _,o in ipairs(shipOptions) do
				if o.id == menu.macro then
					text = o.text
					mouseOverText = o.mouseovertext
					break
				end
			end
		end
		if (menu.mode == "purchase") and (menu.macro ~= "") and (not menu.validLicence) then
			local haslicence, icon, overridecolor, mouseovertext = menu.checkLicence(menu.macro, true)
			text = Helper.convertColorToText(overridecolor) .. text
		end
		row[1]:setColSpan(2):createButton({ active = not menu.isReadOnly, height = menu.titleData.height, mouseOverText = mouseOverText }):setText(text, { halign = "center"  })
		row[1].handlers.onClick = function() L.buttonShipTitleLoad(menu, classOptions, shipOptions, sc_config.contextLayer) end
		return dropdownDummy
	else
		-- class
		row[1]:createDropDown(classOptions, { startOption = menu.class, active = (not menu.isReadOnly) and (#classOptions > 0), helpOverlayID = "shipconfig_classoptions", helpOverlayText = " ", helpOverlayHighlightOnly = true }):setTextProperties(sc_config.dropDownTextProperties)
		row[1].handlers.onDropDownConfirmed = menu.dropdownShipClass
		-- ships
		local dropDownIconProperties = {
			width = menu.titleData.height / 2,
			height = menu.titleData.height / 2,
			x = sc_config.dropdownRatios.ship * menu.titleData.dropdownWidth - 1.5 * menu.titleData.height,
			y = 0,
			scaling = false,
		}
		local dropdown = row[2]:createDropDown(shipOptions, { startOption = curShipOption, active = (not menu.isReadOnly) and (menu.class ~= ""), optionHeight = (menu.statsTableOffsetY or Helper.viewHeight) - menu.titleData.offsetY - Helper.frameBorder, helpOverlayID = "shipconfig_shipoptions", helpOverlayText = " ", helpOverlayHighlightOnly = true }):setTextProperties(sc_config.dropDownTextProperties):setIconProperties(dropDownIconProperties)
		row[2].properties.text.halign = "left"
		row[2].handlers.onDropDownConfirmed = menu.dropdownShip
		return dropdown
	end
end

function L.createShipLoadoutTitleBarButton(row, menu, sc_config, active, loadoutOptions)
	if L.isModEnabledForType(config.shipLoadoutKey) then
		row[3]:createButton({ active = (not menu.isReadOnly) and active and ((menu.object ~= 0) or (menu.macro ~= "")) and (next(menu.loadouts) ~= nil), height = menu.titleData.height, width = menu.titleData.dropdownWidth + menu.titleData.height + Helper.borderSize, mouseOverText = (menu.mode == "customgamestart") and (ColorText["text_warning"] .. ReadText(1026, 8022)) or "" }):setText(ReadText(1001, 7905), { halign = "center" })
		row[3].handlers.onClick = function() L.buttonShipLoadoutTitleLoad(menu, sc_config.contextLayer) end
	else
		row[3]:createDropDown(loadoutOptions, { textOverride = ReadText(1001, 7905), active = (not menu.isReadOnly) and active and ((menu.object ~= 0) or (menu.macro ~= "")) and (next(menu.loadouts) ~= nil), optionWidth = menu.titleData.dropdownWidth + menu.titleData.height + Helper.borderSize, optionHeight = (menu.statsTableOffsetY or Helper.viewHeight) - menu.titleData.offsetY - Helper.frameBorder, mouseOverText = (menu.mode == "customgamestart") and (ColorText["text_warning"] .. ReadText(1026, 8022)) or "" }):setTextProperties(sc_config.dropDownTextProperties)
		row[3].handlers.onDropDownConfirmed = menu.dropdownLoadout
		row[3].handlers.onDropDownRemoved = menu.dropdownLoadoutRemoved
	end
end

function L.isModEnabledForType(type)
	L.settings = nil -- Detect changes from extension options menu
	return L.getLoadSettings(type).enabled
end

function L.buttonStationTitleLoad(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "loadCP") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("loadCP", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.stationKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadHeight,
			itemsList = function() return menu.constructionplans end,
			header = ReadText(1811143915, 2),
			optionItemNameText = ReadText(1811143915, 9),
			onSelection = function(item) menu.dropdownLoad(nil, item.id) end,
			onDeletion = function(item)
				L.buttonDeleteCP(menu, item.id)
			end,
			maxFolders = config.maxFolders,
			itemFilter = L.filterItemByModules,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			isItemActive = function(item) return item.active end,
			frameModules = { L.createSettings, L.createSearchField, L.createCPModulesFilter },
			sortItems = function (a, b) return a.name < b.name end,
			sortOptions = config.defaultSortOptions,
			sortDefault = "name"
		}
		L.autoSelectSearch = true
		L.contextModule = nil
		L.createLoadContext()
	end
end

function L.buttonStationLoadoutTitleLoad(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "loadCL") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("loadCL", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.stationLoadoutKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			itemsList = function() return L.addCustomAutoPresets(config.stationLoadoutKey, menu.loadouts) end,
			header = ReadText(1811143915, 22),
			optionItemNameText = ReadText(1811143915, 24),
			onSelection = function(item)
				menu.closeContextMenu()
				L.onStationLoadoutLoad(menu, item)
			end,
			onDeletion = function(item)
				menu.closeContextMenu()
				L.onLoadoutRemoved(menu.dropdownRemovedLoadout, item)
			end,
			maxFolders = config.maxFolders,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			addToSettingsTable = nil,
			itemFilter = nil,
			isItemActive = function(item) return item.active or (item.preset and true or false) end,
			getItemColor = function(item)
				if item.item.preset or item.item.customPreset then
					return config.autoPresetColor
				end
				return nil
			end,
			onOpenPresetEditor = function() L.buttonStationLoadoutTitleAutoPresets(menu, contextLayer) end,
			frameModules = {
				L.createSettings,
				L.createSearchField,
				function(s) L.createAutoPresetEditorButtons(s) end
			},
			sortItems = function (a, b) return a.name < b.name end,
			sortOptions = config.defaultSortOptions,
			sortDefault = "name",
			isItemRenamable = function(item) return not item.preset end,
			onRename = function(item, newName) L.renameStationLoadout(menu, item, newName) end
		}
		L.autoSelectSearch = true
		L.contextModule = nil
		L.createLoadContext()
	end
end

function L.buttonShipTitleLoad(menu, classOptions, shipOptions, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "loadCS") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("loadCS", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.shipKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			itemsList = function() return shipOptions end,
			header = ReadText(1811143915, 30),
			onSelection = function(item)
				menu.closeContextMenu()
				menu.dropdownShip(nil, item.id)
			end,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			itemFilter = L.filterShip,
			isItemActive = function(_) return true end,
			getItemColor = function(item) return item.item.overridecolor end,
			frameModules = { L.createSearchField, function(stable) L.createShipFilters(stable, classOptions, L.getShipPurposes(shipOptions), L.getShipRaces(shipOptions)) end },
			sortItems = L.sortShips,
			sortOptions = config.shipSortOptions,
			sortDefault = "default"
		}
		L.autoSelectSearch = true
		L.contextModule = nil
		L.createLoadContext()
	end
end

function L.buttonShipLoadoutTitleLoad(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "loadCL") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("loadCL", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.shipLoadoutKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			itemsList = function() return L.addPartialFlag(L.addCustomAutoPresets(config.shipLoadoutKey, Utils.DeepCopy(menu.loadouts))) end,
			header = ReadText(1811143915, 22),
			optionItemNameText = ReadText(1811143915, 24),
			onSelection = function(item)
				menu.closeContextMenu()
				L.onShipLoadoutLoad(menu, item)
			end,
			maxFolders = config.maxFolders,
			onDeletion = function(item)
				menu.closeContextMenu()
				L.onLoadoutRemoved(menu.dropdownLoadoutRemoved, item)
			end,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			isItemActive = function(item) return item.active or (item.preset and true or false) end,
			getItemColor = function(item)
				if item.item.preset or item.item.customPreset then
					return config.autoPresetColor
				elseif item.item.partial then
					return config.partialPresetColor
				end
				return nil
			end,
			onOpenPresetEditor = function() L.buttonShipLoadoutTitleAutoPresets(menu, contextLayer) end,
			frameModules = {
				L.createSettings,
				L.createSearchField,
				function(s) L.createAutoPresetEditorButtons(s) end
			},
			sortItems = function (a, b) return a.name < b.name end,
			sortOptions = config.defaultSortOptions,
			sortDefault = "name",
			isItemRenamable = function(item) return not item.preset end,
			onRename = function(item, newName) L.renameShipLoadout(menu, item, newName) end
		}
		L.autoSelectSearch = true
		L.contextModule = nil
		L.createLoadContext()
	end
end

function L.buttonStationLoadoutTitleAutoPresets(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "autoPreset") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("autoPreset", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		local allMTurrets, allLTurrets = L.getAllTurrets()
		local allSShields, allMShields, allLShields, allXLShields = L.getAllShields()
		L.params = {
			settingKey = config.stationLoadoutKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			editorShipLoadout = false,
			onSave = function() L.buttonStationLoadoutTitleLoad(menu, contextLayer) end,
			weaponsOptions = L.getAllWeapons(),
			mTurretOptions = allMTurrets,
			lTurretOptions = allLTurrets,
			sShieldsOptions = allSShields,
			mShieldOptions = allMShields,
			lShieldOptions = allLShields
		}
		L.createAutoPresetEditorContext()
	end
end

function L.buttonShipLoadoutTitleAutoPresets(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "autoPreset") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("autoPreset", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		local allMTurrets, allLTurrets = L.getAllTurrets()
		local allSShields, allMShields, allLShields, allXLShields = L.getAllShields()
		L.params = {
			settingKey = config.shipLoadoutKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			editorShipLoadout = true,
			onSave = function() L.buttonShipLoadoutTitleLoad(menu, contextLayer) end,
			mTurretOptions = allMTurrets,
			lTurretOptions = allLTurrets,
			sShieldsOptions = allSShields,
			mShieldOptions = allMShields,
			lShieldOptions = allLShields,
			xlShieldOptions = allXLShields,
			engineOptions = L.getAllEngines(),
			thrusterOptions = L.getAllThrusters(),
			weaponOptions = L.getAllWeapons()
		}
		L.createAutoPresetEditorContext()
	end
end

function L.createLoadContext()
	local listRoot = L.prepareBrowserStructure(L.params.itemsList())

	Helper.removeAllWidgetScripts(L.params.menu, L.params.contextLayer)

	local contextFrame = Helper.createFrameHandle(L.params.menu, {
		layer = L.params.contextLayer,
		standardButtons = {},
		width = L.params.width,
		x = L.params.x,
		y = L.params.y,
		autoFrameHeight = true,
	})
	L.params.setContextFrame(contextFrame)
	contextFrame:setBackground("solid", { color = Color["frame_background_semitransparent"] })

	local smallColWidth = Helper.scaleY(Helper.standardTextHeight)
	local browserWidth = L.params.width - config.loadSettingsWidth - Helper.borderSize * 2 - config.settingsBrowserSeparation
	local browserX = config.loadSettingsWidth + Helper.borderSize + config.settingsBrowserSeparation

	-- Create item list --
	local ltable = contextFrame:addTable(config.maxFolders + 1, { wraparound = true, tabOrder = 6, reserveScrollBar = true, maxVisibleHeight = L.params.height - Helper.standardButtonHeight, x = browserX, width = browserWidth })
	for column = 1, config.maxFolders do
		ltable:setColWidth(column, smallColWidth, false)
	end
	L.ltable = ltable
	local row = ltable:addRow(false, { fixed = true })
	row[1]:setColSpan(config.maxFolders + 1):createText(L.params.header, config.browserHeaderTextProperties)

	L.addFolderToList(ltable, listRoot, 1)

	-- Create list buttons --
	local tableColumns = 4
	local btable = contextFrame:addTable(4, { tabOrder = 5, reserveScrollBar = false, highlightMode = "off", y = L.params.height - Helper.standardButtonHeight, x = browserX, width = browserWidth })
	L.btable = btable
	local row = btable:addRow(true, { fixed = true })
	row[1]:createButton({ active = L.isRowValidForLoad }):setText(ReadText(1811143915, 3), { halign = "center" })
	row[1].handlers.onClick = L.buttonLoadItem
	row[2]:createButton({ active = L.isRowValidForRename }):setText("Rename", { halign = "center" })
	row[2].handlers.onClick = L.buttonRenameItem
	row[3]:createButton({ active = L.isRowValidForDeletion }):setText(ReadText(1811143915, 4), { halign = "center" })
	row[3].handlers.onClick = L.buttonDeleteItem
	row[4]:createButton({  }):setText(ReadText(1811143915, 5), { halign = "center" })
	row[4].handlers.onClick = L.params.closeContextMenu

	-- Create expand/collapse all buttons --
	local etable = contextFrame:addTable(3, { tabOrder = 5, x = browserX, y = config.browserHeaderTextProperties.y, width = smallColWidth * 9 })
	etable:setColWidth(1, smallColWidth, false)
	etable:setColWidth(2, smallColWidth, false)
	local row = etable:addRow(true, { })
	row[1]:createButton({ mouseOverText = ReadText(1811143915, 20), active = L.getLoadSettings().folder_enabled }):setText("+", { halign = "center" })
	row[1].handlers.onClick = function() L.buttonExpandAll(listRoot) end
	row[2]:createButton({ mouseOverText = ReadText(1811143915, 21), active = L.getLoadSettings().folder_enabled }):setText("-", { halign = "center" })
	row[2].handlers.onClick = L.buttonCollapseAll
	-- Create sorting dropdown
	row[3]:createDropDown(L.params.sortOptions, { startOption = L.getState().sort or L.params.sortDefault, mouseOverText = ReadText(1811143915, 93), active = #L.params.sortOptions > 1 })
	row[3].handlers.onDropDownConfirmed = L.dropdownSort

	-- Create settings list --
	local stable = contextFrame:addTable(2, { tabOrder = 6, maxVisibleHeight = L.params.height, x = Helper.borderSize, width = config.loadSettingsWidth - Helper.borderSize * 2 })
	stable:setColWidth(1, config.loadSettingsWidth * 0.7, false)

	for _, frameModule in ipairs(L.params.frameModules) do
		frameModule(stable)
	end

	if L.contextModule ~= nil then
		L.contextModule(contextFrame, L.params.height + Helper.standardButtonHeight)
	end

	if L.getState().topRow then
		ltable:setTopRow(L.getState().topRow.listTable)
		stable:setTopRow(L.getState().topRow.settingsTable)
	end
	ltable:setSelectedRow(L.getState().selectedRow)

	contextFrame:display()
end

function L.addFolderToList(ltable, root, column)
	for _, folder in ipairs(root.folders_arr) do
		local row = ltable:addRow(folder, {  })
		local isextended = L.getState().expandedFolders[config.folderIdFormat:format(L.params.settingKey, folder.fullname)]
		row[column]:createButton({ helpOverlayID = folder.fullname, helpOverlayText = " ",  helpOverlayHighlightOnly = true }):setText(isextended and "-" or "+", { halign = "center" })
		row[column].handlers.onClick = function () return L.buttonExtendListEntry(folder.fullname, row.index) end
		local text = L.getLoadSettings().folder_fullname and folder.fullname or folder.name
		row[column + 1]:setColSpan(config.maxFolders - column + 1):createText(text, config.folderTextProperties)
		if isextended then
			L.addFolderToList(ltable, folder, column + 1)
		end
	end

	for _, item in ipairs(root.items) do
		local row = ltable:addRow(item, {  })
		local text = L.getLoadSettings().item_fullname and item.item.name or item.name
		local color
		if not item.active then
			color = config.inactiveColor
		elseif L.params.getItemColor then
			color = L.params.getItemColor(item)
		end
		if color then
			text = Helper.convertColorToText(color) .. text
		end
		row[column]:setColSpan(config.maxFolders - column + 2):createText(text, config.planTextProperties)
		row[column].properties.mouseOverText = item.item.mouseovertext
	end
end

function L.createSettings(stable)
	local smallColWidth = Helper.scaleY(Helper.standardTextHeight)

	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 6), config.browserHeaderTextProperties)

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 7), { })
	row[2]:createCheckBox(L.getLoadSettings().folder_enabled, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting("folder_enabled", checked)
		L.refreshLoadFrame()
	end

	stable:addEmptyRow(Helper.standardTextHeight / 2)

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 8), { })
	local delimiterEditBoxText = L.getLoadSettings().folder_delimiter:gsub(" ", "(space)") -- Replace spaces with '(space)' so that it is easier to read
	row[2]:createEditBox({ scaling = true }):setText(delimiterEditBoxText, { })
	row[2].handlers.onEditBoxDeactivated = function(_, text, textchanged)
		if textchanged then
			text = text:gsub("(space)", " ")
			if text:len() > 1 then
				text = text:sub(1, 1)
			end
			L.setLoadSetting("folder_delimiter", text)
			L.refreshLoadFrame()
		end
	end
	row[2].properties.mouseOverText = ReadText(1811143915, 12)
	row[2].properties.active = L.getLoadSettings().folder_enabled

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(L.params.optionItemNameText, { })
	row[2]:createCheckBox(L.getLoadSettings().item_fullname, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting("item_fullname", checked)
		L.refreshLoadFrame()
	end
	row[2].properties.active = L.getLoadSettings().folder_enabled

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 10), { })
	row[2]:createCheckBox(L.getLoadSettings().folder_fullname, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting("folder_fullname", checked)
		L.refreshLoadFrame()
	end
	row[2].properties.active = L.getLoadSettings().folder_enabled

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 11), { })
	row[2]:createCheckBox(L.getLoadSettings().folder_flatten_single_item, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting("folder_flatten_single_item", checked)
		L.refreshLoadFrame()
	end
	row[2].properties.mouseOverText = ReadText(1811143915, 14)
	row[2].properties.active = L.getLoadSettings().folder_enabled

	stable:addEmptyRow(Helper.standardTextHeight / 2)

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 33), { })
	row[2]:createCheckBox(L.getLoadSettings().item_hide_inactive, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting("item_hide_inactive", checked)
		L.refreshLoadFrame()
	end

	if L.params.settingKey == config.shipLoadoutKey then
		local row = stable:addRow(true, { fixed = true })
		row[1]:createText(ReadText(1811143915, 89), { })
		row[2]:createCheckBox(L.getLoadSettings().item_load_partial, { width = smallColWidth })
		row[2].handlers.onClick = function(_, checked)
			L.setLoadSetting("item_load_partial", checked)
			L.refreshLoadFrame()
		end
		row[2].properties.mouseOverText = ReadText(1811143915, 90)
	end
end

function L.createSearchField(stable)
	-- Search bar --
	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 15), config.browserHeaderTextProperties)

	local row = stable:addRow(true, { fixed = true })
	local editBox = row[1]:createEditBox({ scaling = true, height = Helper.standardButtonHeight }):setText(L.getState().filter.search, { })
	row[1].handlers.onEditBoxDeactivated = L.searchItemEdit
	row[2]:createButton({  }):setText(ReadText(1811143915, 16), { halign = "center" })
	row[2].handlers.onClick = function () L.searchItemEdit(nil, "", true) end
	if L.autoSelectSearch then
		-- This will cause the editbox to be automatically activated --
		L.params.contextMode.nameEditBox = editBox
	end
end

function L.createCPModulesFilter(stable)
	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 17), config.browserHeaderTextProperties)
	row[1].properties.mouseOverText = ReadText(1811143915, 23)

	local addSeparation = L.addModulesToFilter(stable, ReadText(1811143915, 18), true)
	if addSeparation then
		stable:addEmptyRow(Helper.standardTextHeight)
	end
	L.addModulesToFilter(stable, ReadText(1811143915, 19), false)
end

function L.addModulesToFilter(table, buttonText, checked)
	local atLeastOneAdded = false;
	local selectedMacros = L.getState().filter.macros
	for _, module in ipairs(L.getAllProductionModules()) do
		local macro = module.macro
		if (checked and Utils.ArrayIndexOf(selectedMacros, macro) ~= nil) or (not checked and Utils.ArrayIndexOf(selectedMacros, macro) == nil) then
			local row = table:addRow(true, { })
			row[1]:createText(module.name, { })
			row[2]:createButton({  }):setText(buttonText, { halign = "center" })
			row[2].handlers.onClick = function () L.filterMacroToggled(macro, not checked) end
			atLeastOneAdded = true
		end
	end
	return atLeastOneAdded
end

function L.createShipFilters(stable, classOptions, purposes, races)
	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 31), config.browserHeaderTextProperties)

	local addSeparation = L.addAllToShipFilter(stable, classOptions, purposes, races, ReadText(1811143915, 18), true)
	if addSeparation then
		stable:addEmptyRow(Helper.standardTextHeight / 4)
		row = stable:addRow(false, { bgColor = { r = 128, g = 128, b = 128, a = 100 } } )
		row[1]:setColSpan(2):createText("", { height = 3 } )
		stable:addEmptyRow(Helper.standardTextHeight / 4)
	end
	L.addAllToShipFilter(stable, classOptions, purposes, races, ReadText(1811143915, 19), false)
end

function L.addAllToShipFilter(table, classOptions, purposes, races, buttonText, checked)
	local added = L.addToShipFilter(table, classOptions, L.getState().filter.sizes, checked, buttonText, false)
	added = L.addToShipFilter(table, purposes, L.getState().filter.purposes, checked, buttonText, added)
	return L.addToShipFilter(table, races, L.getState().filter.races, checked, buttonText, added)
end

function L.addToShipFilter(table, options, selected, checked, buttonText, atLeastOneAdded)
	local needSep = atLeastOneAdded
	if #options > 1 then
		for _, op in ipairs(options) do
			if (checked and selected[op.id] ~= nil) or (not checked and selected[op.id] == nil) then
				if needSep then
					table:addEmptyRow(Helper.standardTextHeight / 4)
					needSep = false
				end
				local row = table:addRow(true, { })
				row[1]:createText(op.text, { })
				row[2]:createButton({  }):setText(buttonText, { halign = "center" })
				row[2].handlers.onClick = function () L.filterShipToggled(op.id, selected, not checked) end
				atLeastOneAdded = true
			end
		end
	end
	return atLeastOneAdded
end

function L.createAutoPresetEditorButtons(stable)
	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 74), config.browserHeaderTextProperties)
	local row = stable:addRow(true, { fixed = true })
	row[1]:setColSpan(2):createButton({ }):setText(ReadText(1811143915, 75), { halign = "center" })
	row[1].handlers.onClick = function()
		L.getState().presetEditor = nil
		L.params.onOpenPresetEditor()
	end
	local row = stable:addRow(true, { fixed = true })
	row[1]:setColSpan(2):createButton({ active = function() return L.getSelectedRowCustomAutoPreset() ~= nil end }):setText(ReadText(1811143915, 76), { halign = "center" })
	row[1].handlers.onClick = function()
		L.getState().presetEditor = L.getSelectedRowCustomAutoPreset()
		L.params.onOpenPresetEditor()
	end
end

function L.createAutoPresetEditorContext()
	Helper.removeAllWidgetScripts(L.params.menu, L.params.contextLayer)

	local contextFrame = Helper.createFrameHandle(L.params.menu, {
		layer = L.params.contextLayer,
		standardButtons = {},
		width = L.params.width,
		x = L.params.x,
		y = L.params.y,
		autoFrameHeight = true,
	})
	L.params.setContextFrame(contextFrame)
	contextFrame:setBackground("solid", { color = Color["frame_background_semitransparent"] })

	local preset = L.getState().presetEditor
	if not preset then
		preset = {
			name = "New Auto-Preset",
			engines = {},
			weapons = {},
			mturrets = {},
			lturrets = {},
			sshields = {},
			mshields = {},
			lshields = {},
			xlshields = {},
			thrusters = {},
			software = {
				longrangescanner = { type = "exact", id = "software_scannerlongrangemk1" },
				objectscanner = { type = "exact", id = "software_scannerobjectmk1" },
				docking = { type = "exact", id = "none" },
				trading = { type = "exact", id = "none" },
				targeting = { type = "exact", id = "none" }
			},
			drones = { type = "percentage" },
			crew = { type = "percentage" },
			deployables = { type = "percentage" },
			countermeasure = { type = "percentage" }
		}
		L.getState().presetEditor = preset
	end

	local raceOptions = { { id = "any", text = ReadText(1811143915, 34), icon = "", displayremoveoption = false } }
	for _,race in ipairs(L.getAllAutoPresetRaces()) do
		if race ~= "other" then
			table.insert(raceOptions, { id = race.id, text = race.name, icon = "", displayremoveoption = false })
		end
	end

	local htable = contextFrame:addTable(1, { tabOrder = 6, x = Helper.borderSize, width = L.params.width - Helper.borderSize * 2 })
	local row = htable:addRow(false, { fixed = true })
	row[1]:createText(ReadText(1811143915, 35), config.browserHeaderTextProperties)

	local smallColWidth = Helper.scaleY(Helper.standardTextHeight)
	local optionsWidth = (L.params.width / 2) - Helper.borderSize * 2
	local c1table = contextFrame:addTable(6, { tabOrder = 6, x = Helper.borderSize, y = config.browserHeaderTextProperties.height + Helper.borderSize * 3, width = optionsWidth, maxVisibleHeight  = Helper.standardTextHeight * 32 + Helper.standardButtonHeight })
	c1table:setColWidth(1, smallColWidth, false)
	c1table:setColWidth(2, smallColWidth, false)
	c1table:setColWidth(3, smallColWidth, false)
	c1table:setColWidth(4, smallColWidth, false)
	c1table:setColWidth(5, smallColWidth, false)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText(ReadText(1811143915, 36), {})
	L.createPresetRules(c1table, raceOptions, config.valueOptions, L.params.mTurretOptions, preset.mturrets)

	c1table:addEmptyRow(Helper.standardTextHeight / 2)
	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText(ReadText(1811143915, 37), {})
	L.createPresetRules(c1table, raceOptions, config.valueOptions, L.params.lTurretOptions, preset.lturrets)

	if L.params.editorShipLoadout then
		c1table:addEmptyRow(Helper.standardTextHeight / 2)
		local row = c1table:addRow(false, { fixed = false })
		row[1]:setColSpan(6):createText(ReadText(1811143915, 38), {})
		L.createPresetRules(c1table, raceOptions, config.valueOptions, L.params.sShieldsOptions, preset.sshields)
	end

	c1table:addEmptyRow(Helper.standardTextHeight / 2)
	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText(ReadText(1811143915, 39), {})
	L.createPresetRules(c1table, raceOptions, config.valueOptions, L.params.mShieldOptions, preset.mshields)

	c1table:addEmptyRow(Helper.standardTextHeight / 2)
	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText(ReadText(1811143915, 40), {})
	L.createPresetRules(c1table, raceOptions, config.valueOptions, L.params.lShieldOptions, preset.lshields)

	if L.params.editorShipLoadout then
		c1table:addEmptyRow(Helper.standardTextHeight / 2)
		local row = c1table:addRow(false, { fixed = false })
		row[1]:setColSpan(6):createText(ReadText(1811143915, 41), {})
		L.createPresetRules(c1table, raceOptions, config.valueOptions, L.params.xlShieldOptions, preset.xlshields)

		c1table:addEmptyRow(Helper.standardTextHeight / 2)
		local row = c1table:addRow(false, { fixed = false })
		row[1]:setColSpan(6):createText(ReadText(1811143915, 42), {})
		L.createPresetRules(c1table, raceOptions, config.valueOptions, L.params.engineOptions, preset.engines)

		c1table:addEmptyRow(Helper.standardTextHeight / 2)
		local row = c1table:addRow(false, { fixed = false })
		row[1]:setColSpan(6):createText(ReadText(1811143915, 43), {})
		L.createPresetRules(c1table, raceOptions, config.valueOptions, L.params.weaponOptions, preset.weapons)

		c1table:addEmptyRow(Helper.standardTextHeight / 2)
		local row = c1table:addRow(false, { fixed = false })
		row[1]:setColSpan(6):createText(ReadText(1811143915, 44), {})
		local onlyAnyRace = { { id = "any", text = ReadText(1811143915, 34), icon = "", displayremoveoption = false } }
		L.createPresetRules(c1table, onlyAnyRace, config.valueOptions, L.params.thrusterOptions, preset.thrusters)
	end


	local c2table = contextFrame:addTable(3, { tabOrder = 6, x = Helper.borderSize * 2 + (L.params.width / 2), y = config.browserHeaderTextProperties.height + Helper.borderSize * 3, width = optionsWidth })
	c2table:setColWidth(1, smallColWidth, false)

	if L.params.editorShipLoadout then
		local row = c2table:addRow(false, { fixed = false })
		row[1]:setColSpan(3):createText(ReadText(1811143915, 45), {})
		local row = c2table:addRow(true, { fixed = false })
		row[2]:createText(ReadText(1811143915, 46), {})
		row[3]:createDropDown(config.dockingComputerOptions, { startOption = preset.software.docking.id, height = Helper.standardTextHeight })
		row[3].handlers.onDropDownConfirmed = function(_, id)
			preset.software.docking.id = id
		end
		local row = c2table:addRow(true, { fixed = false })
		row[2]:createText(ReadText(1811143915, 47), {})
		row[3]:createDropDown(config.longRangeScannerOptions, { startOption = preset.software.longrangescanner.id, height = Helper.standardTextHeight })
		row[3].handlers.onDropDownConfirmed = function(_, id)
			preset.software.longrangescanner.id = id
		end
		local row = c2table:addRow(true, { fixed = false })
		row[2]:createText(ReadText(1811143915, 48), {})
		row[3]:createDropDown(config.objectScannerOptions, { startOption = preset.software.objectscanner.id, height = Helper.standardTextHeight })
		row[3].handlers.onDropDownConfirmed = function(_, id)
			preset.software.objectscanner.id = id
		end
		local row = c2table:addRow(true, { fixed = false })
		row[2]:createText(ReadText(1811143915, 49), {})
		row[3]:createDropDown(config.targetingComputerOptions, { startOption = preset.software.targeting.id, height = Helper.standardTextHeight })
		row[3].handlers.onDropDownConfirmed = function(_, id)
			preset.software.targeting.id = id
		end
		local row = c2table:addRow(true, { fixed = false })
		row[2]:createText(ReadText(1811143915, 50), {})
		row[3]:createDropDown(config.tradingComputerOptions, { startOption = preset.software.trading.id, height = Helper.standardTextHeight })
		row[3].handlers.onDropDownConfirmed = function(_, id)
			preset.software.trading.id = id
		end

		local row = c2table:addRow(false, { fixed = false })
		row[1]:setColSpan(2):createText(ReadText(1811143915, 51), {})
		L.createPresetPercentageSlider(c2table, "crew", preset.crew, ReadText(1811143915, 52))
		L.createPresetPercentageSlider(c2table, "marines", preset.crew, ReadText(1811143915, 53))

		local row = c2table:addRow(false, { fixed = false })
		row[1]:setColSpan(2):createText(ReadText(1811143915, 54), {})
		L.createPresetPercentageSlider(c2table, "cargo", preset.drones, ReadText(1811143915, 55))
		L.createPresetPercentageSlider(c2table, "mining", preset.drones, ReadText(1811143915, 56))
		L.createPresetPercentageSlider(c2table, "defence", preset.drones, ReadText(1811143915, 57))
		L.createPresetPercentageSlider(c2table, "repair", preset.drones, ReadText(1811143915, 58))

		local row = c2table:addRow(false, { fixed = false })
		row[1]:setColSpan(2):createText(ReadText(1811143915, 59), {})
		L.createPresetPercentageSlider(c2table, "advsatellite", preset.deployables, ReadText(1811143915, 60))
		L.createPresetPercentageSlider(c2table, "satellite", preset.deployables, ReadText(1811143915, 61))
		L.createPresetPercentageSlider(c2table, "resprobe", preset.deployables, ReadText(1811143915, 62))
		L.createPresetPercentageSlider(c2table, "lastower1", preset.deployables, ReadText(1811143915, 63))
		L.createPresetPercentageSlider(c2table, "lastower2", preset.deployables, ReadText(1811143915, 64))
		L.createPresetPercentageSlider(c2table, "ffmine", preset.deployables, ReadText(1811143915, 65))
		L.createPresetPercentageSlider(c2table, "mine", preset.deployables, ReadText(1811143915, 66))
		L.createPresetPercentageSlider(c2table, "trackmine", preset.deployables, ReadText(1811143915, 67))

		local row = c2table:addRow(false, { fixed = false })
		row[1]:setColSpan(2):createText(ReadText(1811143915, 68), {})
		L.createPresetPercentageSlider(c2table, "flares", preset.countermeasure, ReadText(1811143915, 68))

		c2table:addEmptyRow(Helper.standardTextHeight)
	end

	local row = c2table:addRow(true, { fixed = false })
	row[1]:setColSpan(3):createEditBox({ scaling = true, height = Helper.standardButtonHeight }):setText(preset.name, { })
	row[1].handlers.onTextChanged = function(_, text, textchanged)
		preset.name = text
	end

	local allPresets = L.getAutoPresets(L.params.settingKey)
	local row = c2table:addRow(true, { fixed = false })
	row[1]:setColSpan(2):createButton({ active = function() return L.getAutoPresetByName(allPresets, preset.name) ~= nil end }):setText(ReadText(1811143915, 70), { halign = "center" })
	row[1].handlers.onClick = function()
		L.saveAutoPreset(preset, L.getAutoPresetByName(allPresets, preset.name).id)
		L.params.onSave()
	end
	row[3]:createButton({ active = function() return L.getAutoPresetByName(allPresets, preset.name) == nil end }):setText(ReadText(1811143915, 69), { halign = "center" })
	row[3].handlers.onClick = function()
		L.saveAutoPreset(preset)
		L.params.onSave()
	end
	
	if L.getState().topRow then
		c1table:setTopRow(L.getState().topRow.leftTable)
	end

	contextFrame:display()
end

function L.createPresetRules(c1table, raceOptions, valueOptions, exactOptions, rules)
	local exactKey = "exact"
	local autoKey = "auto"

	for i, rule in ipairs(rules) do
		----- Rule header row -----
		local row = c1table:addRow(true, { fixed = false })
		-- Move up button --
		row[2]:createButton({ active = i ~= 1, height = Helper.standardTextHeight }):setIcon("widget_arrow_up_01")
		row[2].handlers.onClick = function ()
			table.insert(rules, i-1, rule)
			table.remove(rules, i+1)
			L.refreshPresetFrame()
		end
		-- Move down button --
		row[3]:createButton({ active = i ~= #rules, height = Helper.standardTextHeight }):setIcon("widget_arrow_down_01")
		row[3].handlers.onClick = function ()
			table.insert(rules, i, rules[i+1])
			table.remove(rules, i+2)
			L.refreshPresetFrame()
		end
		-- Delete button --
		row[4]:createButton({ height = Helper.standardTextHeight }):setIcon("widget_cross_01")
		row[4].handlers.onClick = function ()
			table.remove(rules, i)
			L.refreshPresetFrame()
		end
		-- Rule number --
		--row[5]:setColSpan(2):createText(tostring(i), { })

		if rule.type == exactKey then
			row[5]:setColSpan(2):createText(ReadText(1811143915, 87))
			L.createPresetExactRows(c1table, exactOptions, rule)
		elseif rule.type == autoKey then
			row[5]:setColSpan(2):createText(ReadText(1811143915, 88))
			L.createPresetAutoRows(c1table, raceOptions, valueOptions, rule)
		else
			row[3]:setColSpan(4):createText("Unknown rule type!", {})
		end
	end

	-- Create add new rule dropdown
	local row = c1table:addRow(true, { fixed = false })
	local addOptions = {
		{ id = exactKey, text = ReadText(1811143915, 77), icon = "", displayremoveoption = false },
		{ id = autoKey, text = ReadText(1811143915, 78), icon = "", displayremoveoption = false }
	}
	row[2]:setColSpan(5):createDropDown(addOptions, { height = Helper.standardTextHeight, textOverride = ReadText(1811143915, 79)})
	row[2].handlers.onDropDownConfirmed = function(_, id)
		local rule = { type = id }
		if id == autoKey then
			-- set defaults
			rule.race = "any"
			rule.value = "low"
		end
		table.insert(rules, rule)
		L.refreshPresetFrame()
	end
end

function L.createPresetExactRows(c1table, options, rule)
	local row = c1table:addRow(true, { fixed = false })
	row[3]:setColSpan(3):createText(ReadText(1811143915, 80), {})
	row[6]:createDropDown(options, { startOption = rule.macro, height = Helper.standardTextHeight })
	row[6].handlers.onDropDownConfirmed = function(_, id)
		rule.macro = id
	end
end

function L.createPresetAutoRows(c1table, raceOptions, valueOptions, rule)
	local row = c1table:addRow(true, { fixed = false })
	row[3]:setColSpan(3):createText(ReadText(1811143915, 81), {})
	row[6]:createDropDown(raceOptions, { active = #raceOptions > 1, startOption = rule.race, height = Helper.standardTextHeight })
	row[6].handlers.onDropDownConfirmed = function(_, id)
		rule.race = id
	end
	local row = c1table:addRow(true, { fixed = false })
	row[3]:setColSpan(3):createText(ReadText(1811143915, 82), {})
	row[6]:createDropDown(valueOptions, { active = #valueOptions > 1, startOption = rule.value, height = Helper.standardTextHeight })
	row[6].handlers.onDropDownConfirmed = function(_, id)
		rule.value = id
	end
end

function L.createPresetPercentageSlider(c1table, current, all, text)
	local remaining = 100
	for k, v in pairs(all) do
		if k ~= "type" and k ~= current then
			remaining = remaining - v
		end
	end

	local row = c1table:addRow(true, { fixed = false })
	row[2]:setColSpan(2):createSliderCell({ maxSelect = remaining, height = Helper.standardTextHeight, valueColor = Color["slider_value"], min = 0, max = 100, start = all[current], suffix = "%" }):setText(text)
	row[2].handlers.onSliderCellConfirm = function(_, value)
		all[current] = value
		L.refreshPresetFrame()
	end
end

function L.createDeleteConfirmation(contextFrame, y, item)
	local htable = contextFrame:addTable(8, { tabOrder = 6, x = Helper.borderSize, y = y, width = L.params.width - Helper.borderSize * 2 })
	local row = htable:addRow(false, { fixed = true })
	row[1]:setColSpan(8):createText(ReadText(1811143915, 83), config.browserHeaderTextProperties)

	local row = htable:addRow(false, { fixed = true })
	row[3]:setColSpan(4):createText(ReadText(1811143915, 84):format(item.name), { wordwrap = true })

	htable:addEmptyRow(Helper.standardTextHeight)
	local row = htable:addRow(true, { fixed = true })
	row[5]:createButton({ }):setText(ReadText(1811143915, 85), { halign = "center" })
	row[5].handlers.onClick = function()
		L.params.onDeletion(item)
		L.contextModule = nil
		L.refreshLoadFrame()
	end
	row[6]:createButton({ }):setText(ReadText(1811143915, 86), { halign = "center" })
	row[6].handlers.onClick = function()
		L.contextModule = nil
		L.refreshLoadFrame()
	end
end

function L.createRenameItemContext(contextFrame, y, item)
	local htable = contextFrame:addTable(8, { tabOrder = 6, x = Helper.borderSize, y = y, width = L.params.width - Helper.borderSize * 2 })
	local row = htable:addRow(false, { fixed = true })
	row[1]:setColSpan(8):createText("Rename item", config.browserHeaderTextProperties) -- TODO: text

	local row = htable:addRow(false, { fixed = true })
	row[3]:createText("New name:", { wordwrap = true })
	row[4]:setColSpan(3):createEditBox({ scaling = true, height = Helper.standardTextHeight }):setText(L.renameText, { })
	row[4].handlers.onTextChanged = function(_, text)
		L.renameText = text
	end

	local takenNames = {}
	for _, l in ipairs(L.params.itemsList()) do
		takenNames[l.name] = true
	end

	htable:addEmptyRow(Helper.standardTextHeight)
	local row = htable:addRow(true, { fixed = true })
	row[5]:createButton({ active = function() return not takenNames[L.renameText] end }):setText(ReadText(1811143915, 85), { halign = "center" })
	row[5].handlers.onClick = function()
		DebugError("confirm " .. L.renameText)
		L.params.onRename(item, L.renameText)
		L.contextModule = nil
		L.refreshLoadFrame()
	end
	row[6]:createButton({ }):setText(ReadText(1811143915, 86), { halign = "center" })
	row[6].handlers.onClick = function()
		L.contextModule = nil
		L.refreshLoadFrame()
	end
end

function L.isRowValidForLoad()
	return L.selectedEntry and L.selectedEntry.active
end

function L.isRowValidForDeletion()
	return L.selectedEntry and L.selectedEntry.deleteable
end

function L.isRowValidForRename()
	return L.selectedEntry and L.selectedEntry.renamable
end

function L.getSelectedRowCustomAutoPreset()
	return L.selectedEntry and L.selectedEntry.item and L.selectedEntry.item.customPreset
end

function L.buttonDeleteItem()
	if L.isRowValidForDeletion() then
		L.contextModule = function(contextFrame, y) L.createDeleteConfirmation(contextFrame, y, L.selectedEntry.item) end
		L.refreshLoadFrame()
	end
end

function L.buttonLoadItem()
	if L.isRowValidForLoad() then
		L.params.onSelection(L.selectedEntry.item)
	end
end

function L.buttonRenameItem()
	if L.isRowValidForRename() then
		L.renameText = L.selectedEntry.item.name
		L.contextModule = function(contextFrame, y) L.createRenameItemContext(contextFrame, y, L.selectedEntry.item) end
		L.refreshLoadFrame()
	end
end

function L.refreshLoadFrame()
	local state = L.getState()
	state.topRow = {
		listTable = GetTopRow(state.tables[1]),
		settingsTable = GetTopRow(state.tables[3])
	}
	L.autoSelectSearch = false
	L.createLoadContext()
end

function L.refreshPresetFrame()
	local state = L.getState()
	state.topRow = {
		leftTable = GetTopRow(state.tables[2])
	}
	L.createAutoPresetEditorContext()
end

function L.buttonExtendListEntry(index, row)
	local key = config.folderIdFormat:format(L.params.settingKey, index)
	L.getState().expandedFolders[key] = not L.getState().expandedFolders[key]
	L.getState().selectedRow = row
	L.refreshLoadFrame()
end

function L.buttonExpandAll(listRoot)
	L.expandAll(listRoot)
	L.refreshLoadFrame()
end

function L.expandAll(root)
	for _,folder in ipairs(root.folders_arr) do
		L.getState().expandedFolders[config.folderIdFormat:format(L.params.settingKey, folder.fullname)] = true
		L.expandAll(folder)
	end
end

function L.buttonCollapseAll()
	for k,_ in pairs(L.getState().expandedFolders) do
		L.getState().expandedFolders[k] = false
	end
	L.refreshLoadFrame()
end

function L.searchItemEdit(_, text, textchanged)
	if not textchanged then
		return
	end

	L.getState().filter.search = text
	L.refreshLoadFrame()
end

function L.filterMacroToggled(macro, checked)
	local selectedMacros = L.getState().filter.macros
	if checked then
		table.insert(selectedMacros, macro)
	else
		local index = Utils.ArrayIndexOf(selectedMacros, macro)
		if index then
			table.remove(selectedMacros, index)
		end
	end
	L.refreshLoadFrame()
end

function L.filterShipToggled(id, selected, checked)
	if checked then
		selected[id] = true
	else
		selected[id] = nil
	end
	L.refreshLoadFrame()
end

function L.onRowChanged(uitable, rowdata)
	if L.ltable and uitable == L.ltable.id then
		L.selectedEntry = rowdata
		return true
	end
	return false
end

function L.onSelectElement(uitable)
	if uitable == L.ltable.id then
		L.buttonLoadItem()
	end
end

function L.onDropDownActivated(dropdown)
	return true
end

function L.viewCreated(layer, ...)
	if layer == 2 then
		L.getState().tables = table.pack(...)
	end
end

function L.onStationLoadoutLoad(menu, item)
	if not item.customPreset then
		menu.dropdownLoadout(_, item.id)
		return
	end

	local upgradeplan = L.generateLoadoutUpgradePlan(menu, item.customPreset)

	menu.getUpgradeData(upgradeplan)
	if menu.holomap and (menu.holomap ~= 0) then
		Helper.callLoadoutFunction(menu.constructionplan[menu.loadoutMode].upgradeplan, nil, function (loadout, _) return C.UpdateObjectConfigurationMap(menu.holomap, menu.container, menu.loadoutModule.component, menu.loadoutModule.macro, true, loadout) end)
	end

	menu.displayMenu()
end

function L.onShipLoadoutLoad(menu, item)
	if item.customPreset then
		local upgradeplan = L.generateLoadoutUpgradePlan(menu, item.customPreset)
		if menu.usemacro then
			menu.captainSelected = true
		end
		menu.getDataAndDisplay(upgradeplan, nil)
	elseif item.partial and L.getLoadSettings().item_load_partial then
		local loadout = Helper.getLoadoutHelper2(C.GetLoadout2, C.GetLoadoutCounts2, "UILoadout2", menu.object, menu.macro, item.id)
		local upgradeplan = Helper.convertLoadout(menu.object, menu.macro, loadout, menu.software, "UILoadout2")
		L.trimPartialLoadout(menu.upgradeplan, upgradeplan, menu.upgradewares)
		menu.getDataAndDisplay(upgradeplan, menu.crew)
	else
		menu.dropdownLoadout(_, item.id)
	end
end

function L.onLoadoutRemoved(defaultLoad, item)
	if not item.customPreset then
		defaultLoad(nil, item.id)
		return
	end

	local autoPresets = GetNPCBlackboard(L.getPlayerId(), config.autoPresetsBlackboardId)
	if autoPresets then
		autoPresets[L.params.settingKey][item.id] = nil
		SetNPCBlackboard(L.getPlayerId(), config.autoPresetsBlackboardId, autoPresets)
		L.refreshLoadFrame()
	end
end

function L.buttonDeleteCP(menu, id)
	C.RemoveConstructionPlan("local", id)
	if id == menu.currentCPID then
		menu.currentCPID = nil
		menu.currentCPName = nil
	end
	for i, plan in ipairs(menu.constructionplans) do
		if plan.id == id then
			table.remove(menu.constructionplans, i)
			break
		end
	end
end

function L.dropdownSort(_, id)
	L.getState().sort = id
	L.refreshLoadFrame()
end


init()

return L