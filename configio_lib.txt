-- ffi setup 
local ffi = require("ffi")
local C = ffi.C

local L = {}

local config = {
	stationKey = "station",
	stationLoadoutKey = "station_loadout",
	shipKey = "ship",
	shipLoadoutKey = "ship_loadout",
	folderIdFormat = "rkn_configio.folder.%s.%s",
	settingsBlackboardId = "$RKN_ConfigioSettings",
	autoPresetsBlackboardId = "$RKN_ConfigioAutoPresets",
	loadWidthMultiplier = 0.8,
	maxFolders = 6,
	stationLoadHeight = 0.5 * Helper.viewHeight,
	stationLoadoutLoadHeight = 0.3 * Helper.viewHeight,
	loadSettingsWidth = Helper.scaleX(300),
	settingsBrowserSeparation = Helper.borderSize * 10,
	browserHeaderTextProperties = {
		font = Helper.headerRow1Font,
		fontsize = Helper.headerRow1FontSize,
		x = Helper.headerRow1Offsetx,
		y = math.floor((Helper.scaleY(30) - Helper.scaleY(Helper.headerRow1Height)) / 2 + Helper.scaleY(Helper.headerRow1Offsety)),
		height = Helper.scaleY(30),
		halign = "center",
		cellBGColor = Color["row_background"],
		titleColor = Color["row_title"],
	},
	folderTextProperties = {
		font = Helper.titleFont,
		fontsize = Helper.standardFontSize,
		height = Helper.subHeaderHeight,
		cellBGColor = Color["row_background"],
		titleColor = { r = 128, g = 128, b = 128, a = 100 }
	},
	planTextProperties = {
		height = math.floor(Helper.standardTextHeight + Helper.scaleY(1) * 2),
		y = math.floor(Helper.scaleY(1)),
	},
	inactiveColor = { r = 128, g = 128, b = 128, a = 100 },
	autoPresetColor = { r = 181, g = 188, b = 255, a = 255 }
}


local function EscapeGmatch(s)
    return (s:gsub('[%-%.%+%[%]%(%)%$%^%%%?%*]','%%%1'))
end

local function ArrayRemove(t, fnKeep)
    local j, n = 1, #t;

    for i=1,n do
        if (fnKeep(t, i, j)) then
            -- Move i's kept value to j's position, if it's not already there.
            if (i ~= j) then
                t[j] = t[i];
                t[i] = nil;
            end
            j = j + 1; -- Increment position of where we'll place the next kept value.
        else
            t[i] = nil;
        end
    end

    return t;
end

local function ArrayIndexOf(arr, v)
	if not arr then
		return nil
	end
	for i, m in ipairs(arr) do
		if m == v then
			return i
		end
	end
	return nil
end

local function ShallowCopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in pairs(orig) do
            copy[orig_key] = orig_value
        end
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

-- For debugging --
function SerializeTable(val, name, skipnewlines, depth)
    skipnewlines = skipnewlines or false
    depth = depth or 0

    local tmp = string.rep(" ", depth)

    if name then tmp = tmp .. name .. " = " end

    if type(val) == "table" then
        tmp = tmp .. "{" .. (not skipnewlines and "\n" or "")

        for k, v in pairs(val) do
            tmp =  tmp .. SerializeTable(v, k, skipnewlines, depth + 1) .. "," .. (not skipnewlines and "\n" or "")
        end

        tmp = tmp .. string.rep(" ", depth) .. "}"
    elseif type(val) == "number" then
        tmp = tmp .. tostring(val)
    elseif type(val) == "string" then
        tmp = tmp .. string.format("%q", val)
    elseif type(val) == "boolean" then
        tmp = tmp .. (val and "true" or "false")
    else
        tmp = tmp .. "\"[inserializeable datatype:" .. type(val) .. "]\""
    end

    return tmp
end

function DebugSplit(s)
	if s:len() > 8192 then
		local a = s:sub(1, 8192)
		local b = s:sub(8192)
		DebugError(a)
		DebugSplit(b)
	else
		DebugError(s)
	end
end


local function init()
	L.playerID = ConvertStringTo64Bit(tostring(C.GetPlayerID()))

	L.state = {}
	for _,key in ipairs({config.stationKey, config.stationLoadoutKey, config.shipLoadoutKey, config.shipKey}) do
		L.state[key] = {
			filter = {
				macros = {},
				races = {}
			},
			expandedFolders = {},
			selectedRow = nil,
			topRow = nil,
		}
	end

	L.settings = {}
	L.autoPresets = {}
	L.params = {}
	L.allProductionModules = L.getAllProductionModules()
	L.allRaces = L.getAllRaces()
	L.allWeapons = L.getAllWeapons()
	L.allMTurrets, L.allLTurrets = L.getAllTurrets()
	L.allSShields, L.allMShields, L.allLShields, L.allXLShields = L.getAllShields()
	L.allEngines = L.getAllEngines()
	L.allThrusters = L.getAllThrusters()

	-- Set settings for extension options menu on game start --
	local settings = L.getLoadSettings()
	SetNPCBlackboard(L.playerID, config.settingsBlackboardId, settings)
end








---------- UI HANDLING ------------

function L.createStationTitleBarButton(row, menu, sc_config, loadOptions)
	if L.isModEnabledForType(config.stationKey) then
		row[2]:createButton({ helpOverlayID = "open_constructionplan_browser", helpOverlayText = " ", helpOverlayHighlightOnly = true, active = true, height = menu.titleData.height }):setText(ReadText(1811143915, 1), { halign = "center" })
		row[2].handlers.onClick = function() L.buttonStationTitleLoad(menu, sc_config.contextLayer) end
	else
		row[2]:createDropDown(loadOptions, { textOverride = ReadText(1001, 7904), optionWidth = menu.titleData.dropdownWidth + menu.titleData.height + Helper.borderSize }):setTextProperties(sc_config.dropDownTextProperties)
		row[2].handlers.onDropDownConfirmed = menu.dropdownLoad
		row[2].handlers.onDropDownRemoved = menu.dropdownRemovedCP
	end
end

function L.createRefreshStationTitleBarButton(menu, text, loadOptions)
	-- No need for refreshing if enabled --
	if not L.isModEnabledForType(config.stationKey) then
		local desc = Helper.createDropDown(loadOptions, "", text, nil, true, true, 0, 0, 0, 0, nil, nil, "", menu.titleData.dropdownWidth + menu.titleData.height + Helper.borderSize)
		Helper.setCellContent(menu, menu.titlebartable, desc, 1, 2, nil, "dropdown", nil, nil, menu.dropdownLoad, menu.dropdownRemovedCP)
	end
end

function L.createStationLoadoutTitleBarButton(row, menu, sc_config, loadoutOptions)
	if L.isModEnabledForType(config.stationLoadoutKey) then
		row[2]:setColSpan(4):createButton({ helpOverlayText = " ", helpOverlayHighlightOnly = true, active = true, height = menu.titleData.height }):setText(ReadText(1811143915, 22), { halign = "center" })
		row[2].handlers.onClick = function() L.buttonStationLoadoutTitleLoad(menu, sc_config.contextLayer) end
	else
		row[2]:setColSpan(6):createDropDown(loadoutOptions, { textOverride = ReadText(1001, 7905), optionWidth = menu.titleData.dropdownWidth + 6 * (menu.titleData.height + Helper.borderSize) }):setTextProperties(sc_config.dropDownTextProperties)
		row[2].handlers.onDropDownConfirmed = menu.dropdownLoadout
		row[2].handlers.onDropDownRemoved = menu.dropdownRemovedLoadout
	end
end

function L.createRefreshStationLoadoutTitleBarButton(menu, text, loadoutOptions)
	-- No need for refreshing if enabled --
	if not L.isModEnabledForType(config.stationKey) then
		local desc = Helper.createDropDown(loadoutOptions, "", text, nil, true, next(menu.loadouts) ~= nil, 0, 0, 0, 0, nil, nil, "", menu.titleData.dropdownWidth + 4 * (menu.titleData.height + Helper.borderSize))
		Helper.setCellContent(menu, menu.titlebartable, desc, 1, 2, nil, "dropdown", nil, nil, menu.dropdownLoadout, menu.dropdownRemovedLoadout)
	end
end

function L.createShipTitleBarButton(row, menu, sc_config, shipOptions, curShipOption, dropDownIconProperties)
	if L.isModEnabledForType(config.shipKey) and menu.mode ~= "upgrade" then
		local dropdownDummy = { properties = { text = { }, icon = {} } }
		local text = ReadText(1811143915, 30)
		local mouseOverText = ""
		if menu.macro and menu.macro ~= "" then
			for _,o in ipairs(shipOptions) do
				if o.id == menu.macro then
					text = o.text
					mouseOverText = o.mouseovertext
					break
				end
			end
		end
		if (menu.mode == "purchase") and (menu.macro ~= "") and (not menu.validLicence) then
			local haslicence, icon, overridecolor, mouseovertext = menu.checkLicence(menu.macro, true)
			text = Helper.convertColorToText(overridecolor) .. text
		end
		row[2]:createButton({ active = (not menu.isReadOnly) and (menu.class ~= ""), height = menu.titleData.height, mouseOverText = mouseOverText }):setText(text, { halign = "center"  })
		row[2].handlers.onClick = function() L.buttonShipTitleLoad(menu, shipOptions, sc_config.contextLayer) end
		return dropdownDummy
	else
		local dropdown = row[2]:createDropDown(shipOptions, { startOption = curShipOption, active = (not menu.isReadOnly) and (menu.class ~= ""), optionHeight = (menu.statsTableOffsetY or Helper.viewHeight) - menu.titleData.offsetY - Helper.frameBorder, helpOverlayID = "shipconfig_shipoptions", helpOverlayText = " ", helpOverlayHighlightOnly = true }):setTextProperties(sc_config.dropDownTextProperties):setIconProperties(dropDownIconProperties)
		row[2].properties.text.halign = "left"
		row[2].handlers.onDropDownConfirmed = menu.dropdownShip
		return dropdown
	end
end

function L.createShipLoadoutTitleBarButton(row, menu, sc_config, active, loadoutOptions)
	if L.isModEnabledForType(config.shipLoadoutKey) then
		row[3]:createButton({ active = (not menu.isReadOnly) and active and ((menu.object ~= 0) or (menu.macro ~= "")) and (next(menu.loadouts) ~= nil), height = menu.titleData.height, width = menu.titleData.dropdownWidth + menu.titleData.height + Helper.borderSize, mouseOverText = (menu.mode == "customgamestart") and (ColorText["text_warning"] .. ReadText(1026, 8022)) or "" }):setText(ReadText(1001, 7905), { halign = "center" })
		row[3].handlers.onClick = function() L.buttonShipLoadoutTitleLoad(menu, sc_config.contextLayer) end
	else
		row[3]:setColSpan(2):createDropDown(loadoutOptions, { textOverride = ReadText(1001, 7905), active = (not menu.isReadOnly) and active and ((menu.object ~= 0) or (menu.macro ~= "")) and (next(menu.loadouts) ~= nil), optionWidth = menu.titleData.dropdownWidth + menu.titleData.height + Helper.borderSize, optionHeight = (menu.statsTableOffsetY or Helper.viewHeight) - menu.titleData.offsetY - Helper.frameBorder, mouseOverText = (menu.mode == "customgamestart") and (ColorText["text_warning"] .. ReadText(1026, 8022)) or "" }):setTextProperties(sc_config.dropDownTextProperties)
		row[3].handlers.onDropDownConfirmed = menu.dropdownLoadout
		row[3].handlers.onDropDownRemoved = menu.dropdownLoadoutRemoved
	end
end

function L.isModEnabledForType(type)
	return L.getLoadSettings()[type].enabled
end

function L.buttonStationTitleLoad(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "loadCP") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("loadCP", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.stationKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadHeight,
			itemsList = function() return menu.constructionplans end,
			header = ReadText(1811143915, 2),
			optionItemNameText = ReadText(1811143915, 9),
			onSelection = function(item) menu.dropdownLoad(nil, item.id) end,
			onDeletion = function(item) menu.dropdownRemovedCP(nil, item.id) end,
			itemFilter = L.filterItemByModules,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			isItemActive = function(item) return item.active end,
			frameModules = { L.createSettings, L.createSearchField, L.createCPModulesFilter }
		}
		L.autoSelectSearch = true
		L.contextModule = nil
		L.createLoadContext()
	end
end

function L.buttonStationLoadoutTitleLoad(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "loadCL") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("loadCL", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.stationLoadoutKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			itemsList = function() return L.addCustomAutoPresets(config.stationLoadoutKey, menu.loadouts) end,
			header = ReadText(1811143915, 22),
			optionItemNameText = ReadText(1811143915, 24),
			onSelection = function(item)
				menu.closeContextMenu()
				L.onStationLoadoutLoad(menu, item)
			end,
			onDeletion = function(item)
				menu.closeContextMenu()
				L.onLoadoutRemoved(menu.dropdownRemovedLoadout, item)
			end,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			addToSettingsTable = nil,
			itemFilter = nil,
			isItemActive = function(item) return item.active or (item.preset and true or false) end,
			overrideItemText = function(item)
				if item.item.preset or item.item.customPreset then
					return Helper.convertColorToText(config.autoPresetColor) .. item.name
				end
				return item.name
			end,
			frameModules = { L.createSettings, L.createSearchField }
		}
		L.autoSelectSearch = true
		L.contextModule = nil
		L.createLoadContext()
	end
end

function L.buttonShipTitleLoad(menu, shipOptions, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "loadCS") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("loadCS", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.shipKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			itemsList = function() return shipOptions end,
			header = ReadText(1811143915, 30),
			onSelection = function(item)
				menu.closeContextMenu()
				menu.dropdownShip(nil, item.id)
			end,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			itemFilter = L.filterItemByRace,
			isItemActive = function(_) return true end,
			overrideItemText = function(item) return Helper.convertColorToText(item.item.overridecolor) .. item.item.text end,
			frameModules = { L.createSearchField, L.createShipRacesFilter }
		}
		L.autoSelectSearch = true
		L.contextModule = nil
		L.createLoadContext()
	end
end

function L.buttonShipLoadoutTitleLoad(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "loadCL") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("loadCL", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.shipLoadoutKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			itemsList = function() return L.addCustomAutoPresets(config.shipLoadoutKey, menu.loadouts) end,
			header = ReadText(1811143915, 22),
			optionItemNameText = ReadText(1811143915, 24),
			onSelection = function(item)
				menu.closeContextMenu()
				L.onShipLoadoutLoad(menu, item)
			end,
			onDeletion = function(item)
				menu.closeContextMenu()
				L.onLoadoutRemoved(menu.dropdownLoadoutRemoved, item)
			end,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu,
			isItemActive = function(item) return item.active or (item.preset and true or false) end,
			overrideItemText = function(item)
				if item.item.preset or item.item.customPreset then
					return Helper.convertColorToText(config.autoPresetColor) .. item.name
				end
				return item.name
			end,
			frameModules = {
				L.createSettings,
				L.createSearchField,
				function(s) L.createAutoPresetEditorButtons(s, function() L.buttonShipLoadoutTitleAutoPresets(menu, contextLayer) end) end
			}
		}
		L.autoSelectSearch = true
		L.contextModule = nil
		L.createLoadContext()
	end
end

function L.buttonShipLoadoutTitleAutoPresets(menu, contextLayer)
	if menu.contextMode and (menu.contextMode.mode == "autoPreset") then
		menu.closeContextMenu()
	else
		menu.displayContextFrame("autoPreset", menu.titleData.width * config.loadWidthMultiplier, menu.titleData.offsetX + (menu.titleData.width * (1 - config.loadWidthMultiplier) / 2), menu.titleData.offsetY + menu.titleData.height + Helper.borderSize)
		L.params = {
			settingKey = config.shipLoadoutKey,
			x = menu.contextMode.x,
			y = menu.contextMode.y,
			width = menu.contextMode.width,
			height = config.stationLoadoutLoadHeight,
			contextLayer = contextLayer,
			closeContextMenu = menu.closeContextMenu,
			contextMode = menu.contextMode,
			setContextFrame = function(f) menu.contextFrame = f end,
			menu = menu
		}
		L.createAutoPresetEditorContext()
	end
end

function L.createLoadContext()
	L.settings = L.getLoadSettings()[L.params.settingKey]
	local listRoot = L.prepareBrowserStructure(L.params.itemsList())

	Helper.removeAllWidgetScripts(L.params.menu, L.params.contextLayer)

	local contextFrame = Helper.createFrameHandle(L.params.menu, {
		layer = L.params.contextLayer,
		standardButtons = {},
		width = L.params.width,
		x = L.params.x,
		y = L.params.y,
		autoFrameHeight = true,
	})
	L.params.setContextFrame(contextFrame)
	contextFrame:setBackground("solid", { color = Color["frame_background_semitransparent"] })

	local smallColWidth = Helper.scaleY(Helper.standardTextHeight)
	local browserWidth = L.params.width - config.loadSettingsWidth - Helper.borderSize * 2 - config.settingsBrowserSeparation
	local browserX = config.loadSettingsWidth + Helper.borderSize + config.settingsBrowserSeparation

	-- Create item list --
	local ltable = contextFrame:addTable(config.maxFolders + 1, { wraparound = true, tabOrder = 6, reserveScrollBar = true, maxVisibleHeight = L.params.height - Helper.standardButtonHeight, x = browserX, width = browserWidth })
	for column = 1, config.maxFolders do
		ltable:setColWidth(column, smallColWidth, false)
	end
	L.ltable = ltable
	local row = ltable:addRow(false, { fixed = true })
	row[1]:setColSpan(config.maxFolders + 1):createText(L.params.header, config.browserHeaderTextProperties)

	L.addFolderToList(ltable, listRoot, 1)

	ltable:setTopRow(L.state[L.params.settingKey].topRow)
	ltable:setSelectedRow(L.state[L.params.settingKey].selectedRow)

	-- Create list buttons --
	local tableColumns = 4
	local btable = contextFrame:addTable(tableColumns, { tabOrder = 5, reserveScrollBar = false, highlightMode = "off", y = L.params.height - Helper.standardButtonHeight, x = browserX, width = browserWidth })
	L.btable = btable
	local row = btable:addRow(true, { fixed = true })
	row[tableColumns-2]:createButton({ active = L.isRowValidForLoad }):setText(ReadText(1811143915, 3), { halign = "center" })
	row[tableColumns-2].handlers.onClick = L.buttonLoadItem
	row[tableColumns-1]:createButton({ active = L.isRowValidForDeletion }):setText(ReadText(1811143915, 4), { halign = "center" })
	row[tableColumns-1].handlers.onClick = L.buttonDeleteItem
	row[tableColumns]:createButton({  }):setText(ReadText(1811143915, 5), { halign = "center" })
	row[tableColumns].handlers.onClick = L.params.closeContextMenu

	-- Create expand/collapse all buttons --
	local etable = contextFrame:addTable(2, { tabOrder = 5, x = browserX, y = config.browserHeaderTextProperties.y, width = smallColWidth * 2 })
	local row = etable:addRow(true, { })
	row[1]:createButton({ mouseOverText = ReadText(1811143915, 20), active = L.settings.folder_enabled }):setText("+", { halign = "center" })
	row[1].handlers.onClick = function() L.buttonExpandAll(listRoot) end
	row[2]:createButton({ mouseOverText = ReadText(1811143915, 21), active = L.settings.folder_enabled }):setText("-", { halign = "center" })
	row[2].handlers.onClick = L.buttonCollapseAll

	-- Create settings list --
	local stable = contextFrame:addTable(2, { tabOrder = 6, maxVisibleHeight = L.params.height, x = Helper.borderSize, width = config.loadSettingsWidth - Helper.borderSize * 2 })
	stable:setColWidth(1, config.loadSettingsWidth * 0.7, false)

	for _, frameModule in ipairs(L.params.frameModules) do
		frameModule(stable)
	end

	if L.contextModule ~= nil then
		L.contextModule(contextFrame, L.params.height + Helper.standardButtonHeight)
	end

	contextFrame:display()
end

function L.addFolderToList(ltable, root, column)
	for _, folder in ipairs(root.folders_arr) do
		local row = ltable:addRow(folder, {  })
		local isextended = L.state[L.params.settingKey].expandedFolders[config.folderIdFormat:format(L.params.settingKey, folder.fullname)]
		row[column]:createButton({ helpOverlayID = folder.fullname, helpOverlayText = " ",  helpOverlayHighlightOnly = true }):setText(isextended and "-" or "+", { halign = "center" })
		row[column].handlers.onClick = function () return L.buttonExtendListEntry(folder.fullname, row.index) end
		local text = L.settings.folder_fullname and folder.fullname or folder.name
		row[column + 1]:setColSpan(config.maxFolders - column + 1):createText(text, config.folderTextProperties)
		if isextended then
			L.addFolderToList(ltable, folder, column + 1)
		end
	end

	for _, item in ipairs(root.items) do
		local row = ltable:addRow(item, {  })
		local text = L.settings.item_fullname and item.item.name or item.name
		if not item.active then
			text = Helper.convertColorToText(config.inactiveColor) .. text
		end
		if L.params.overrideItemText then
			text = L.params.overrideItemText(item)
		end
		row[column]:setColSpan(config.maxFolders - column + 2):createText(text, config.planTextProperties)
		row[column].properties.mouseOverText = item.item.mouseovertext
	end
end

function L.createSettings(stable)
	local smallColWidth = Helper.scaleY(Helper.standardTextHeight)

	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 6), config.browserHeaderTextProperties)

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 7), { })
	row[2]:createCheckBox(L.settings.folder_enabled, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting(L.params.settingKey, "folder_enabled", checked)
		L.refreshLoadFrame()
	end

	stable:addEmptyRow(Helper.standardTextHeight)

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 8), { })
	local delimiterEditBoxText = L.settings.folder_delimiter:gsub(" ", "(space)") -- Replace spaces with '(space)' so that it is easier to read
	row[2]:createEditBox({ scaling = true }):setText(delimiterEditBoxText, { })
	row[2].handlers.onEditBoxDeactivated = function(_, text, textchanged)
		if textchanged then
			text = text:gsub("(space)", " ")
			if text:len() > 1 then
				text = text:sub(1, 1)
			end
			L.setLoadSetting(L.params.settingKey, "folder_delimiter", text)
			L.refreshLoadFrame()
		end
	end
	row[2].properties.mouseOverText = ReadText(1811143915, 12)
	row[2].properties.active = L.settings.folder_enabled

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(L.params.optionItemNameText, { })
	row[2]:createCheckBox(L.settings.item_fullname, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting(L.params.settingKey, "item_fullname", checked)
		L.refreshLoadFrame()
	end
	row[2].properties.active = L.settings.folder_enabled

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 10), { })
	row[2]:createCheckBox(L.settings.folder_fullname, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting(L.params.settingKey, "folder_fullname", checked)
		L.refreshLoadFrame()
	end
	row[2].properties.active = L.settings.folder_enabled

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 11), { })
	row[2]:createCheckBox(L.settings.folder_flatten_single_item, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting(L.params.settingKey, "folder_flatten_single_item", checked)
		L.refreshLoadFrame()
	end
	row[2].properties.mouseOverText = ReadText(1811143915, 14)
	row[2].properties.active = L.settings.folder_enabled

	local row = stable:addRow(true, { fixed = true })
	row[1]:createText(ReadText(1811143915, 33), { })
	row[2]:createCheckBox(L.settings.item_hide_inactive, { width = smallColWidth })
	row[2].handlers.onClick = function(_, checked)
		L.setLoadSetting(L.params.settingKey, "item_hide_inactive", checked)
		L.refreshLoadFrame()
	end
end

function L.createSearchField(stable)
	-- Search bar --
	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 15), config.browserHeaderTextProperties)

	local row = stable:addRow(true, { fixed = true })
	local editBox = row[1]:createEditBox({ scaling = true, height = Helper.standardButtonHeight }):setText(L.state[L.params.settingKey].filter.search, { })
	row[1].handlers.onEditBoxDeactivated = L.searchItemEdit
	row[2]:createButton({  }):setText(ReadText(1811143915, 16), { halign = "center" })
	row[2].handlers.onClick = function () L.searchItemEdit(nil, "", true) end
	if L.autoSelectSearch then
		-- This will cause the editbox to be automatically activated --
		L.params.contextMode.nameEditBox = editBox
	end
end

function L.createCPModulesFilter(stable)
	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 17), config.browserHeaderTextProperties)
	row[1].properties.mouseOverText = ReadText(1811143915, 23)

	local addSeparation = L.addModulesToFilter(stable, ReadText(1811143915, 18), true)
	if addSeparation then
		stable:addEmptyRow(Helper.standardTextHeight)
	end
	L.addModulesToFilter(stable, ReadText(1811143915, 19), false)
end

function L.addModulesToFilter(table, buttonText, checked)
	local atLeastOneAdded = false;
	local selectedMacros = L.state[L.params.settingKey].filter.macros
	for _, module in ipairs(L.allProductionModules) do
		local macro = module.macro
		if (checked and ArrayIndexOf(selectedMacros, macro) ~= nil) or (not checked and ArrayIndexOf(selectedMacros, macro) == nil) then
			local row = table:addRow(true, { })
			row[1]:createText(module.name, { })
			row[2]:createButton({  }):setText(buttonText, { halign = "center" })
			row[2].handlers.onClick = function () L.filterMacroToggled(macro, not checked) end
			atLeastOneAdded = true
		end
	end
	return atLeastOneAdded
end

function L.createShipRacesFilter(stable)
	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText(ReadText(1811143915, 31), config.browserHeaderTextProperties)

	local addSeparation = L.addRacesToFilter(stable, ReadText(1811143915, 18), true)
	if addSeparation then
		stable:addEmptyRow(Helper.standardTextHeight)
	end
	L.addRacesToFilter(stable, ReadText(1811143915, 19), false)
end

function L.addRacesToFilter(table, buttonText, checked)
	local atLeastOneAdded = false;
	local selectedRaces = L.state[L.params.settingKey].filter.races
	for _, race in ipairs(L.allRaces) do
		if (checked and selectedRaces[race.id] ~= nil) or (not checked and selectedRaces[race.id] == nil) then
			local row = table:addRow(true, { })
			row[1]:createText(race.name, { })
			row[2]:createButton({  }):setText(buttonText, { halign = "center" })
			row[2].handlers.onClick = function () L.filterRaceToggled(race.id, not checked) end
			atLeastOneAdded = true
		end
	end
	return atLeastOneAdded
end

function L.createAutoPresetEditorButtons(stable, frameCreator)
	local row = stable:addRow(false, { fixed = true })
	row[1]:setColSpan(2):createText("Auto Presets", config.browserHeaderTextProperties)
	local row = stable:addRow(true, { fixed = true })
	row[1]:setColSpan(2):createButton({ }):setText("Open Editor", { halign = "center" })
	row[1].handlers.onClick = function()
		L.state[L.params.settingKey].presetEditor = nil
		frameCreator()
	end
	local row = stable:addRow(true, { fixed = true })
	row[1]:setColSpan(2):createButton({ active = function() return L.getSelectedRowCustomAutoPreset() ~= nil end }):setText("Edit Selected in Editor", { halign = "center" })
	row[1].handlers.onClick = function()
		L.state[L.params.settingKey].presetEditor = L.getSelectedRowCustomAutoPreset()
		frameCreator()
	end
end

function L.createAutoPresetEditorContext()
	Helper.removeAllWidgetScripts(L.params.menu, L.params.contextLayer)

	local contextFrame = Helper.createFrameHandle(L.params.menu, {
		layer = L.params.contextLayer,
		standardButtons = {},
		width = L.params.width,
		x = L.params.x,
		y = L.params.y,
		autoFrameHeight = true,
	})
	L.params.setContextFrame(contextFrame)
	contextFrame:setBackground("solid", { color = Color["frame_background_semitransparent"] })

	local preset = L.state[L.params.settingKey].presetEditor
	if not preset then
		preset = {
			engines = {},
			weapons = {},
			mturrets = {},
			lturrets = {},
			sshields = {},
			mshields = {},
			lshields = {},
			xlshields = {},
			thrusters = {},
			software = {
				longrangescanner = { type = "exact", id = "software_scannerlongrangemk1" },
				objectscanner = { type = "exact", id = "software_scannerobjectmk1" },
				docking = { type = "exact", id = "none" },
				trading = { type = "exact", id = "none" },
				targeting = { type = "exact", id = "none" }
			},
			drones = { type = "percentage" },
			crew = { type = "percentage" },
			deployables = { type = "percentage" },
			countermeasure = { type = "percentage" }
		}
		L.state[L.params.settingKey].presetEditor = preset
	end

	local raceOptions = { { id = "any", text = "Any", icon = "", displayremoveoption = false } }
	for _,race in ipairs(L.allRaces) do
		if race ~= "other" then
			table.insert(raceOptions, { id = race.id, text = race.name, icon = "", displayremoveoption = false })
		end
	end
	local valueOptions = {
		{ id = "low", text = "Low", icon = "", displayremoveoption = false },
		{ id = "medium", text = "Medium", icon = "", displayremoveoption = false },
		{ id = "high", text = "High", icon = "", displayremoveoption = false }
	}
	local thrusterOptions = {
		{ id = "mk1", text = "Mk1", icon = "", displayremoveoption = false },
		{ id = "mk2", text = "Mk2", icon = "", displayremoveoption = false },
		{ id = "mk3", text = "Mk3", icon = "", displayremoveoption = false }
	}
	local dockingComputerOptions = {
		{ id = "none", text = "None", icon = "", displayremoveoption = false },
		{ id = "software_dockmk1", text = "Mk1", icon = "", displayremoveoption = false },
		{ id = "software_dockmk2", text = "Mk2", icon = "", displayremoveoption = false }
	}
	local longRangeScannerOptions = {
		{ id = "software_scannerlongrangemk1", text = "Mk1", icon = "", displayremoveoption = false },
		{ id = "software_scannerlongrangemk2", text = "Mk2", icon = "", displayremoveoption = false }
	}
	local objectScannerOptions = {
		{ id = "software_scannerobjectmk1", text = "Basic", icon = "", displayremoveoption = false },
		{ id = "software_scannerobjectmk2", text = "Police", icon = "", displayremoveoption = false }
	}
	local targetingComputerOptions = {
		{ id = "none", text = "None", icon = "", displayremoveoption = false },
		{ id = "software_targetmk1", text = "Mk1", icon = "", displayremoveoption = false }
	}
	local tradingComputerOptions = {
		{ id = "none", text = "None", icon = "", displayremoveoption = false },
		{ id = "software_trademk1", text = "Mk1", icon = "", displayremoveoption = false }
	}

	local htable = contextFrame:addTable(1, { tabOrder = 6, x = Helper.borderSize, width = L.params.width - Helper.borderSize * 2 })
	local row = htable:addRow(false, { fixed = true })
	row[1]:createText("Custom Auto-generated Preset Editor", config.browserHeaderTextProperties) -- TODO: move text to xml

	local smallColWidth = Helper.scaleY(Helper.standardTextHeight)
	local optionsWidth = (L.params.width / 2) - Helper.borderSize * 2
	local c1table = contextFrame:addTable(6, { tabOrder = 6, x = Helper.borderSize, y = config.browserHeaderTextProperties.height + Helper.borderSize * 3, width = optionsWidth, maxVisibleHeight  = Helper.standardTextHeight * 30 })
	c1table:setColWidth(1, smallColWidth, false)
	c1table:setColWidth(2, smallColWidth, false)
	c1table:setColWidth(3, smallColWidth, false)
	c1table:setColWidth(4, smallColWidth, false)
	c1table:setColWidth(5, smallColWidth, false)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("M Turrets", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allMTurrets, preset.mturrets)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("L Turrets", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allLTurrets, preset.lturrets)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("S Shields", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allSShields, preset.sshields)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("M Shields", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allMShields, preset.mshields)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("L Shields", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allLShields, preset.lshields)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("XL Shields", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allXLShields, preset.xlshields)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("Engines", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allEngines, preset.engines)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("Weapons", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allWeapons, preset.weapons)

	local row = c1table:addRow(false, { fixed = false })
	row[1]:setColSpan(6):createText("Thrusters", {}) -- TODO: move text to xml
	L.createPresetRules(c1table, raceOptions, valueOptions, L.allThrusters, preset.thrusters)


	local c2table = contextFrame:addTable(3, { tabOrder = 6, x = Helper.borderSize * 2 + (L.params.width / 2), y = config.browserHeaderTextProperties.height + Helper.borderSize * 3, width = optionsWidth })
	c2table:setColWidth(1, smallColWidth, false)

	local row = c2table:addRow(false, { fixed = false })
	row[1]:setColSpan(3):createText("Software", {}) -- TODO: move text to xml
	local row = c2table:addRow(true, { fixed = false })
	row[2]:createText("Docking Computer", {}) -- TODO: move text to xml
	row[3]:createDropDown(dockingComputerOptions, { startOption = preset.software.docking.id, height = Helper.standardTextHeight })
	row[3].handlers.onDropDownConfirmed = function(_, id)
		preset.software.docking.id = id
	end
	local row = c2table:addRow(true, { fixed = false })
	row[2]:createText("Long Range Scanner", {}) -- TODO: move text to xml
	row[3]:createDropDown(longRangeScannerOptions, { startOption = preset.software.longrangescanner.id, height = Helper.standardTextHeight })
	row[3].handlers.onDropDownConfirmed = function(_, id)
		preset.software.longrangescanner.id = id
	end
	local row = c2table:addRow(true, { fixed = false })
	row[2]:createText("Object Scanner", {}) -- TODO: move text to xml
	row[3]:createDropDown(objectScannerOptions, { startOption = preset.software.objectscanner.id, height = Helper.standardTextHeight })
	row[3].handlers.onDropDownConfirmed = function(_, id)
		preset.software.objectscanner.id = id
	end
	local row = c2table:addRow(true, { fixed = false })
	row[2]:createText("Targeting Computer", {}) -- TODO: move text to xml
	row[3]:createDropDown(targetingComputerOptions, { startOption = preset.software.targeting.id, height = Helper.standardTextHeight })
	row[3].handlers.onDropDownConfirmed = function(_, id)
		preset.software.targeting.id = id
	end
	local row = c2table:addRow(true, { fixed = false })
	row[2]:createText("Trading Computer", {}) -- TODO: move text to xml
	row[3]:createDropDown(tradingComputerOptions, { startOption = preset.software.trading.id, height = Helper.standardTextHeight })
	row[3].handlers.onDropDownConfirmed = function(_, id)
		preset.software.trading.id = id
	end

	local row = c2table:addRow(false, { fixed = false })
	row[1]:setColSpan(2):createText("Crew", {}) -- TODO: move text to xml
	L.createPresetPercentageSlider(c2table, "crew", preset.crew, "Crew")
	L.createPresetPercentageSlider(c2table, "marines", preset.crew, "Marines")

	local row = c2table:addRow(false, { fixed = false })
	row[1]:setColSpan(2):createText("Drones", {}) -- TODO: move text to xml
	L.createPresetPercentageSlider(c2table, "cargo", preset.drones, "Cargo")
	L.createPresetPercentageSlider(c2table, "mining", preset.drones, "Mining/Gas")
	L.createPresetPercentageSlider(c2table, "defence", preset.drones, "Defence")
	L.createPresetPercentageSlider(c2table, "repair", preset.drones, "Repair")

	local row = c2table:addRow(false, { fixed = false })
	row[1]:setColSpan(2):createText("Deployables", {}) -- TODO: move text to xml
	L.createPresetPercentageSlider(c2table, "advsatellite", preset.deployables, "Advanced Satellite")
	L.createPresetPercentageSlider(c2table, "satellite", preset.deployables, "Satellite")
	L.createPresetPercentageSlider(c2table, "resprobe", preset.deployables, "Resource Probe")
	L.createPresetPercentageSlider(c2table, "lastower1", preset.deployables, "Laser Tower Mk1")
	L.createPresetPercentageSlider(c2table, "lastower2", preset.deployables, "Laser Tower Mk2")
	L.createPresetPercentageSlider(c2table, "ffmine", preset.deployables, "Friend/Foe Mine")
	L.createPresetPercentageSlider(c2table, "mine", preset.deployables, "Mine")
	L.createPresetPercentageSlider(c2table, "trackmine", preset.deployables, "Tracking Mine")

	local row = c2table:addRow(false, { fixed = false })
	row[1]:setColSpan(2):createText("Flares", {}) -- TODO: move text to xml
	L.createPresetPercentageSlider(c2table, "flares", preset.countermeasure, "Flares")

	c2table:addEmptyRow(Helper.standardTextHeight)

	local row = c2table:addRow(true, { fixed = false })
	row[1]:setColSpan(3):createEditBox({ scaling = true, height = Helper.standardButtonHeight }):setText(preset.name, { })
	row[1].handlers.onTextChanged = function(_, text, textchanged)
		preset.name = text
	end
	local row = c2table:addRow(true, { fixed = false })
	row[1]:setColSpan(3):createButton({ }):setText("Save", { halign = "center" })
	row[1].handlers.onClick = function()
		L.saveAutoPreset(preset)
		L.createAutoPresetEditorContext()
	end

	contextFrame:display()
end

function L.createPresetRules(c1table, raceOptions, valueOptions, exactOptions, rules)
	local exactKey = "exact"
	local autoKey = "auto"

	for i, rule in ipairs(rules) do
		----- Rule header row -----
		local row = c1table:addRow(true, { fixed = false })
		-- Move up button --
		row[2]:createButton({ active = i ~= 1, height = Helper.standardTextHeight }):setIcon("widget_arrow_up_01")
		row[2].handlers.onClick = function ()
			table.insert(rules, i-1, rule)
			table.remove(rules, i+1)
			L.createAutoPresetEditorContext()
		end
		-- Move down button --
		row[3]:createButton({ active = i ~= #rules, height = Helper.standardTextHeight }):setIcon("widget_arrow_down_01")
		row[3].handlers.onClick = function ()
			table.insert(rules, i, rules[i+1])
			table.remove(rules, i+2)
			L.createAutoPresetEditorContext()
		end
		-- Delete button --
		row[4]:createButton({ height = Helper.standardTextHeight }):setIcon("widget_cross_01")
		row[4].handlers.onClick = function ()
			table.remove(rules, i)
			L.createAutoPresetEditorContext()
		end
		-- Rule number --
		--row[5]:setColSpan(2):createText(tostring(i), { })

		if rule.type == exactKey then
			L.createPresetExactRows(c1table, exactOptions, rule)
		elseif rule.type == autoKey then
			L.createPresetAutoRows(c1table, raceOptions, valueOptions, rule)
		else
			row[3]:setColSpan(4):createText("Unknown rule type!", {})
		end
	end

	-- Create add new rule dropdown
	local row = c1table:addRow(true, { fixed = false })
	local addOptions = {
		{ id = exactKey, text = "Exact module", icon = "", displayremoveoption = false }, -- TODO: move text to xml
		{ id = autoKey, text = "Auto choose", icon = "", displayremoveoption = false } -- TODO: move text to xml
	}
	row[2]:setColSpan(5):createDropDown(addOptions, { height = Helper.standardTextHeight, textOverride = "Add new rule"}) -- TODO: move text to xml
	row[2].handlers.onDropDownConfirmed = function(_, id)
		local rule = { type = id }
		if id == autoKey then
			-- set defaults
			rule.race = "any"
			rule.value = "low"
		end
		table.insert(rules, rule)
		L.createAutoPresetEditorContext()
	end
end

function L.createPresetExactRows(c1table, options, rule)
	local row = c1table:addRow(true, { fixed = false })
	row[3]:setColSpan(3):createText("Exact", {}) -- TODO: move text to xml
	row[6]:createDropDown(options, { startOption = rule.macro, height = Helper.standardTextHeight })
	row[6].handlers.onDropDownConfirmed = function(_, id)
		rule.macro = id
	end
end

function L.createPresetAutoRows(c1table, raceOptions, valueOptions, rule)
	local row = c1table:addRow(true, { fixed = false })
	row[3]:setColSpan(3):createText("Race", {}) -- TODO: move text to xml
	row[6]:createDropDown(raceOptions, { startOption = rule.race, height = Helper.standardTextHeight })
	row[6].handlers.onDropDownConfirmed = function(_, id)
		rule.race = id
	end
	local row = c1table:addRow(true, { fixed = false })
	row[3]:setColSpan(3):createText("Value", {}) -- TODO: move text to xml
	row[6]:createDropDown(valueOptions, { startOption = rule.value, height = Helper.standardTextHeight })
	row[6].handlers.onDropDownConfirmed = function(_, id)
		rule.value = id
	end
end

function L.createPresetPercentageSlider(c1table, current, all, text)
	local remaining = 100
	for k, v in pairs(all) do
		if k ~= "type" and k ~= current then
			remaining = remaining - v
		end
	end

	local row = c1table:addRow(true, { fixed = false })
	row[2]:setColSpan(2):createSliderCell({ maxSelect = remaining, height = Helper.standardTextHeight, valueColor = Color["slider_value"], min = 0, max = 100, start = all[current], suffix = "%" }):setText(text)
	row[2].handlers.onSliderCellConfirm = function(_, value)
		all[current] = value
		L.createAutoPresetEditorContext()
	end
end

function L.isRowValidForLoad()
	return L.selectedEntry and L.selectedEntry.active
end

function L.isRowValidForDeletion()
	return L.selectedEntry and L.selectedEntry.deleteable
end

function L.getSelectedRowCustomAutoPreset()
	return L.selectedEntry and L.selectedEntry.item and L.selectedEntry.item.customPreset
end

function L.buttonDeleteItem()
	if L.isRowValidForDeletion() then
		L.params.onDeletion(L.selectedEntry.item)
	end
end

function L.buttonLoadItem()
	if L.isRowValidForLoad() then
		L.params.onSelection(L.selectedEntry.item)
	end
end

function L.refreshLoadFrame()
	L.state[L.params.settingKey].topRow = GetTopRow(L.params.menu.contexttable)
	L.autoSelectSearch = false
	L.createLoadContext()
end

function L.buttonExtendListEntry(index, row)
	local key = config.folderIdFormat:format(L.params.settingKey, index)
	L.state[L.params.settingKey].expandedFolders[key] = not L.state[L.params.settingKey].expandedFolders[key]
	L.state[L.params.settingKey].selectedRow = row
	L.refreshLoadFrame()
end

function L.buttonExpandAll(listRoot)
	L.expandAll(listRoot)
	L.refreshLoadFrame()
end

function L.expandAll(root)
	for _,folder in ipairs(root.folders_arr) do
		L.state[L.params.settingKey].expandedFolders[config.folderIdFormat:format(L.params.settingKey, folder.fullname)] = true
		L.expandAll(folder)
	end
end

function L.buttonCollapseAll()
	for k,_ in pairs(L.state[L.params.settingKey].expandedFolders) do
		L.state[L.params.settingKey].expandedFolders[k] = false
	end
	L.refreshLoadFrame()
end

function L.searchItemEdit(_, text, textchanged)
	if not textchanged then
		return
	end

	L.state[L.params.settingKey].filter.search = text
	L.refreshLoadFrame()
end

function L.filterMacroToggled(macro, checked)
	local selectedMacros = L.state[L.params.settingKey].filter.macros
	if checked then
		table.insert(selectedMacros, macro)
	else
		local index = ArrayIndexOf(selectedMacros, macro)
		if index then
			table.remove(selectedMacros, index)
		end
	end
	L.refreshLoadFrame()
end

function L.filterRaceToggled(id, checked)
	local selectedRaces = L.state[L.params.settingKey].filter.races
	if checked then
		selectedRaces[id] = true
	else
		selectedRaces[id] = nil
	end
	L.refreshLoadFrame()
end

function L.onRowChanged(uitable, rowdata)
	if L.ltable and uitable == L.ltable.id then
		L.selectedEntry = rowdata
		return true
	end
	return false
end

function L.onSelectElement(uitable)
	if uitable == L.ltable.id then
		L.buttonLoadItem()
	end
end

function L.onDropDownActivated(dropdown)
	return true
end

function L.onStationLoadoutLoad(menu, item)
	if not item.customPreset then
		menu.dropdownLoadout(_, item.id)
		return
	end

	local upgradeplan = L.generateLoadoutUpgradePlan(menu, item.customPreset)
	L.DebugSplit(L.SerializeTable(upgradeplan))

	menu.getUpgradeData(upgradeplan)
	if menu.holomap and (menu.holomap ~= 0) then
		Helper.callLoadoutFunction(menu.constructionplan[menu.loadoutMode].upgradeplan, nil, function (loadout, _) return C.UpdateObjectConfigurationMap(menu.holomap, menu.container, menu.loadoutModule.component, menu.loadoutModule.macro, true, loadout) end)
	end

	menu.displayMenu()
end

function L.onShipLoadoutLoad(menu, item)
	if not item.customPreset then
		menu.dropdownLoadout(_, item.id)
		return
	end

	local upgradeplan = L.generateLoadoutUpgradePlan(menu, item.customPreset)

	if menu.usemacro then
		menu.captainSelected = true
	end
	menu.getDataAndDisplay(upgradeplan, nil)
end

function L.onLoadoutRemoved(defaultLoad, item)
	if not item.customPreset then
		defaultLoad(nil, item.id)
		return
	end

	local autoPresets = GetNPCBlackboard(L.playerID, config.autoPresetsBlackboardId)
	if autoPresets then
		autoPresets[L.params.settingKey][item.id] = nil
		SetNPCBlackboard(L.playerID, config.autoPresetsBlackboardId, autoPresets)
		L.refreshLoadFrame()
	end
end







------- LOGICAL --------

function L.prepareBrowserStructure(itemList)
	-- First we build the folder structure --
	local root = { type = "folder", name = "root", folders = {}, folders_arr = {}, items = {} }
	for _, item in ipairs(itemList) do
		if not L.filterItem(item) then
			goto continue
		end
		local cwd = root
		-- iterate through item folders --
		local nextMatch = string.gmatch(item.name, "[^" .. EscapeGmatch(L.settings.folder_delimiter) .. "]+")
		local folder = nextMatch()
		local name = item.name
		local levelsLeft = L.settings.folder_enabled and config.maxFolders or 0
		local folderPath = ""
		while 1==1 do
			-- Check if this is the item name --
			local next = nextMatch()
			if not next then
				name = folder
				break
			end
			levelsLeft = levelsLeft -1
			if levelsLeft <= 0 then
				-- Make the rest of the actual item name, the displayed name --
				name = item.name:sub(folderPath:len())
				break
			end
			-- Otherwise, path to folder --
			folderPath = folderPath .. "/" .. folder
			local target = cwd.folders[folder]
			if not target then
				target = { type = "folder", name = folder, fullname = folderPath, folders = {}, folders_arr = {}, items = {} }
				cwd.folders[folder] = target
				table.insert(cwd.folders_arr, target)
			end
			cwd = target
			folder = next
		end
		-- Inser item to final folder --
		table.insert(cwd.items, { type = "item", name = name, active = L.params.isItemActive(item), deleteable = item.deleteable, item = item })
		::continue::
	end

	if L.settings.folder_flatten_single_item then
		L.undentSingleItems(root)
	end

	-- Now we sort all folders --
	L.sortFolder(root)

	return root
end

function L.filterItem(item)
	local search = L.state[L.params.settingKey].filter.search
	if search and search ~= "" then
		local searchMatch = item.name:lower():find(search:lower())
		if not searchMatch then
			return false
		end
	end
	if L.settings.item_hide_inactive and not L.params.isItemActive(item) then
		return false
	end
	if L.params.itemFilter and (not L.params.itemFilter(item)) then
		return false
	end
	return true
end

function L.filterItemByModules(item)
	local selectedMacros = L.state[L.params.settingKey].filter.macros
	if selectedMacros and #selectedMacros > 0 then
		local hasmacros = Helper.textArrayHelper(selectedMacros, function (numtexts, texts) return C.CheckConstructionPlanForMacros(item.id, texts, numtexts) end)
		if not hasmacros then
			return false
		end
	end
	return true
end

function L.filterItemByRace(item)
	local makerraces = GetMacroData(item.id, "makerraceid")
	local selectedRaces = L.state[L.params.settingKey].filter.races
	if selectedRaces and next(selectedRaces) ~= nil then
		local f = false
		for k,_ in pairs(selectedRaces) do
			if #makerraces == 0 then
				if k == "other" then
					return true
				end
			else
				for _,r in ipairs(makerraces) do
					if r == k or (r == "xenon" and k == "other") then
						return true
					end
				end
			end
		end
		return false
	end
	return true
end

function L.undentSingleItems(folder, parent)
	local canDelete = true
	local atLeastOneSubFolder = false
	-- recursive --
	ArrayRemove(folder.folders_arr, function(t, i, j)
		local subfolder = folder.folders_arr[i];
		local keepSubFolder = L.undentSingleItems(subfolder, folder)
		canDelete = canDelete and not keepSubFolder
		atLeastOneSubFolder = atLeastOneSubFolder or keepSubFolder
		return keepSubFolder
	end);

	-- move item to parent if there is only one --
	local itemCount = #folder.items
	if itemCount == 1 and not atLeastOneSubFolder and parent then
		local item = folder.items[1]

		table.insert(parent.items, item)
		table.remove(folder.items, 1)

		item.name = folder.name .. L.settings.folder_delimiter .. item.name
	elseif itemCount > 1 then
		canDelete = false
	end
	return not canDelete
end

function L.sortFolder(folder)
	table.sort(folder.items, function (a, b) return a.name < b.name end)
	table.sort(folder.folders_arr, function (a, b) return a.name < b.name end)
	for _, innerFolder in ipairs(folder.folders_arr) do
		L.sortFolder(innerFolder)
	end
end

function L.getAllWaresByTag(tag)
	-- uint32_t GetNumWares(const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
	-- uint32_t GetWares(const char** result, uint32_t resultlen, const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
	local result = {}
	local numwares = C.GetNumWares(tag, false, nil, "noplayerblueprint")
	local wares = ffi.new("const char*[?]", numwares)
	numwares = C.GetWares(wares, numwares, tag, false, nil, "noplayerblueprint")
	for j = 0, numwares - 1 do
		local locware = ffi.string(wares[j])
		table.insert(result, locware)
	end
	return result
end

function L.getAllProductionModules()
	local result = {}
    for _, ware in ipairs(L.getAllWaresByTag("module")) do
        local name, macro = GetWareData(ware, "name", "component")
		local moduletype = GetMacroData(macro, "infolibrary")

		if moduletype == "moduletypes_production" then
			local entry = { name = name, macro = macro }
			table.insert(result, entry)
		end
    end
	
	table.sort(result, function (a, b) return a.name < b.name end)
	return result
end

function L.getAllWeapons()
	local result = {}
    for _, ware in ipairs(L.getAllWaresByTag("weapon")) do
        local name, macro = GetWareData(ware, "name", "component")
		local entry = { text = name, id = macro, icon = "", displayremoveoption = false }
		table.insert(result, entry)
    end
	
	table.sort(result, function (a, b) return a.text < b.text end)
	return result
end

function L.getAllTurrets()
	local mTurrets = {}
	local lTurrets = {}
    for _, ware in ipairs(L.getAllWaresByTag("turret")) do
        local name, macro = GetWareData(ware, "name", "component")
		local entry = { text = name, id = macro, icon = "", displayremoveoption = false }
		local _, _, slotsize = macro:find("^%a+_%a+_(%a)_")
		if slotsize then
			if slotsize:lower() == "l" then
				table.insert(lTurrets, entry)
			elseif slotsize:lower() == "m" then
				table.insert(mTurrets, entry)
			end
		end
    end
	
	table.sort(mTurrets, function (a, b) return a.text < b.text end)
	table.sort(lTurrets, function (a, b) return a.text < b.text end)
	return mTurrets, lTurrets
end

function L.getAllShields()
	local mShields = {}
	local lShields = {}
	local xlShields = {}
	local sShields = {}
    for _, ware in ipairs(L.getAllWaresByTag("shield")) do
        local name, macro = GetWareData(ware, "name", "component")
		local entry = { text = name, id = macro, icon = "", displayremoveoption = false }
		local _, _, type, slotsize = macro:find("^(%a+)_%a+_(%a+)_")
		if slotsize and type ~= "ishield" then -- Ignore VRO internal shields
			if slotsize:lower() == "l" then
				table.insert(lShields, entry)
			elseif slotsize:lower() == "m" then
				table.insert(mShields, entry)
			elseif slotsize:lower() == "xl" then
				table.insert(xlShields, entry)
			elseif slotsize:lower() == "s" then
				table.insert(sShields, entry)
			end
		end
    end
	
	table.sort(sShields, function (a, b) return a.text < b.text end)
	table.sort(mShields, function (a, b) return a.text < b.text end)
	table.sort(lShields, function (a, b) return a.text < b.text end)
	table.sort(xlShields, function (a, b) return a.text < b.text end)
	return sShields, mShields, lShields, xlShields
end

function L.getAllEngines()
	local result = {}
    for _, ware in ipairs(L.getAllWaresByTag("engine")) do
        local name, macro = GetWareData(ware, "name", "component")
		local entry = { text = name, id = macro, icon = "", displayremoveoption = false }
		table.insert(result, entry)
    end
	
	table.sort(result, function (a, b) return a.text < b.text end)
	return result
end

function L.getAllThrusters()
	local result = {}
    for _, ware in ipairs(L.getAllWaresByTag("thruster")) do
        local name, macro = GetWareData(ware, "name", "component")
		local entry = { text = name, id = macro, icon = "", displayremoveoption = false }
		table.insert(result, entry)
    end
	
	table.sort(result, function (a, b) return a.text < b.text end)
	return result
end

function L.getAllRaces()
	local skip = { khaak = true, drone = true, xenon = true }
	local races = {}
	local n = C.GetNumAllRaces()
	local buf = ffi.new("RaceInfo[?]", n)
	n = C.GetAllRaces(buf, n)
	for i = 0, n - 1 do
		local entry = {}
		entry.id = ffi.string(buf[i].id)
		entry.name = ffi.string(buf[i].name)

		if not skip[entry.id] then
			table.insert(races, entry)
		end
	end
	table.sort(races, function (a, b) return a.name < b.name end)
	table.insert(races, { name = "Other", id = "other" })
	return races
end

function L.getLoadSettings()
	local default = {
		folder_enabled = false,
		folder_delimiter = "/",
		folder_flatten_single_item = false,
		folder_fullname = false,
		item_fullname = true,
		item_hide_inactive = false,
		enabled = true,
	}
	local allDefault = {
		[config.stationKey] = ShallowCopy(default),
		[config.stationLoadoutKey] = ShallowCopy(default),
		[config.shipKey] = ShallowCopy(default),
		[config.shipLoadoutKey] = ShallowCopy(default)
	}
	if not L.playerID then
		return allDefault
	end
	local all = GetNPCBlackboard(L.playerID, config.settingsBlackboardId)
	if not all then
		return allDefault
	end
	local r = {
		[config.stationKey] = L.convertLoadSettings(all[config.stationKey], default),
		[config.stationLoadoutKey] = L.convertLoadSettings(all[config.stationLoadoutKey], default),
		[config.shipKey] = L.convertLoadSettings(all[config.shipKey], default),
		[config.shipLoadoutKey] = L.convertLoadSettings(all[config.shipLoadoutKey], default)
	}
	return r
end

function L.convertLoadSettings(s, default)
	if not s then
		return default
	end
	return {
		folder_enabled = s.folder_enabled == nil and default.folder_enabled or s.folder_enabled == 1,
		folder_delimiter = (s.folder_delimiter == nil or s.folder_delimiter == "") and default.folder_delimiter or s.folder_delimiter,
		folder_flatten_single_item = s.folder_flatten_single_item == nil and default.folder_flatten_single_item or s.folder_flatten_single_item == 1,
		folder_fullname = s.folder_fullname == nil and default.folder_fullname or s.folder_fullname == 1,
		item_fullname = s.item_fullname == nil and default.item_fullname or s.item_fullname == 1,
		item_hide_inactive = s.item_hide_inactive == nil and default.item_hide_inactive or s.item_hide_inactive == 1,
		enabled = s.enabled == nil and default.enabled or s.enabled == 1,
	}
end

function L.setLoadSetting(configKey, key, value)
	local settings = L.getLoadSettings()
	settings[configKey][key] = value
	SetNPCBlackboard(L.playerID, config.settingsBlackboardId, settings)
end

function L.addCustomAutoPresets(key, loadouts)
	local autoPresets = GetNPCBlackboard(L.playerID, config.autoPresetsBlackboardId)
	if autoPresets and next(autoPresets[key]) ~= nil then
		loadouts = ShallowCopy(loadouts)
		for id, preset in pairs(autoPresets[key]) do
			table.insert(loadouts, { customPreset = preset, id = id, name = preset.name, deleteable = true, active = true })
		end
	end
	return loadouts
end

function L.saveAutoPreset(preset)
	if not preset or not preset.name or preset.name == "" then
		return
	end
	local autoPresets = GetNPCBlackboard(L.playerID, config.autoPresetsBlackboardId)
	if not autoPresets then
		autoPresets = {
			[config.stationKey] = { },
			[config.stationLoadoutKey] = { },
			[config.shipKey] = {  },
			[config.shipLoadoutKey] = { },
			idCounter = 0
		}
	end
	local autoPresetsForKey = autoPresets[L.params.settingKey]
	local id = autoPresets.idCounter + 1
	autoPresets.idCounter = id
	preset.id = id
	autoPresetsForKey["rknconfigio_auto_" .. tostring(id)] = preset
	SetNPCBlackboard(L.playerID, config.autoPresetsBlackboardId, autoPresets)
end

function L.generateLoadoutUpgradePlan(menu, presetTemplate)
	local upgradeplan = {
		drone = { },
		thruster = { },
		shield = { },
		engine = { },
		deployable = { },
		crew = { },
		turret = { },
		turretgroup = { },
		software = { },
		shieldgroup = { },
		countermeasure = { },
		missile = { },
		enginegroup = { },
		weapon = { }
	}

	for _, group in ipairs(menu.groups) do
		if #group.turret.possiblemacros > 0 then
			local chosenMacro
			if group.turret.slotsize == "medium" then
				chosenMacro = L.chooseMacroByRules(menu, group.turret.possiblemacros, presetTemplate.mturrets)
			elseif group.turret.slotsize == "large" then
				chosenMacro = L.chooseMacroByRules(menu, group.turret.possiblemacros, presetTemplate.lturrets)
			end
			if chosenMacro then
				table.insert(upgradeplan.turretgroup, { path = group.path, group = group.group, count = group.turret.total, macro = chosenMacro })
			end
		end
		if #group.shield.possiblemacros > 0 then
			local chosenMacro
			if group.shield.slotsize == "medium" then
				chosenMacro = L.chooseMacroByRules(menu, group.shield.possiblemacros, presetTemplate.mshields)
			elseif group.shield.slotsize == "large" then
				chosenMacro = L.chooseMacroByRules(menu, group.shield.possiblemacros, presetTemplate.lshields)
			elseif group.shield.slotsize == "extralarge" then
				chosenMacro = L.chooseMacroByRules(menu, group.shield.possiblemacros, presetTemplate.xlshields)
			end
			if chosenMacro then
				table.insert(upgradeplan.shieldgroup, { path = group.path, group = group.group, count = group.shield.total, macro = chosenMacro })
			end
		end
		if #group.engine.possiblemacros > 0 then
			local chosenMacro = L.chooseMacroByRules(menu, group.engine.possiblemacros, presetTemplate.engines)
			if chosenMacro then
				table.insert(upgradeplan.enginegroup, { path = group.path, group = group.group, count = group.engine.total, macro = chosenMacro })
				for i = 1, group.engine.total do
					table.insert(upgradeplan.engine, { macro = chosenMacro })
				end
			end
		end
	end

	for type, slots in pairs(menu.slots) do
		for i, slot in ipairs(slots) do
			if not slot.isgroup and #slot.possiblemacros > 0 then
				if type == "shield" then
					local chosenMacro
					if slot.slotsize == "small" then
						chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.sshields)
					elseif slot.slotsize == "medium" then
						chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.mshields)
					elseif slot.slotsize == "large" then
						chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.lshields)
					elseif slot.slotsize == "extralarge" then
						chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.xlshields)
					else
						-- Internal shields from VRO has no slotsize and only one available macro
						chosenMacro = slot.possiblemacros[1]
					end
					if chosenMacro then
						upgradeplan.shield[i] = { macro = chosenMacro }
					end
				elseif type == "weapon" then
					local chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.weapons)
					if chosenMacro then
						upgradeplan.weapon[i] = { macro = chosenMacro }
					end
				elseif type == "engine" and #upgradeplan.enginegroup == 0 then
					local chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.engines)
					if chosenMacro then
						upgradeplan.engine[i] = { macro = chosenMacro }
					end
				elseif type == "turret" then
					local chosenMacro
					if slot.slotsize == "medium" then
						chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.mturrets)
					elseif slot.slotsize == "large" then
						chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.lturrets)
					end
					if chosenMacro then
						upgradeplan.turret[i] = { macro = chosenMacro }
					end
				elseif type == "thruster" then
					local chosenMacro = L.chooseMacroByRules(menu, slot.possiblemacros, presetTemplate.thrusters)
					if chosenMacro then
						upgradeplan.thruster[i] = { macro = chosenMacro }
					end
				end
			end
		end
	end

	if presetTemplate.software.docking.id ~= "none" then
		upgradeplan.software[1] = presetTemplate.software.docking.id
	end
	if presetTemplate.software.longrangescanner.id ~= "none" then
		upgradeplan.software[3] = presetTemplate.software.longrangescanner.id
	end
	if presetTemplate.software.objectscanner.id ~= "none" then
		upgradeplan.software[4] = presetTemplate.software.objectscanner.id
	end
	if presetTemplate.software.targeting.id ~= "none" then
		upgradeplan.software[5] = presetTemplate.software.targeting.id
	end
	if presetTemplate.software.trading.id ~= "none" then
		upgradeplan.software[6] = presetTemplate.software.trading.id
	end
	upgradeplan.software[2] = "software_flightassistmk1"
	if menu.crew then
		local crewCapacity = menu.crew.capacity
		upgradeplan.crew.service = L.getProportionateCount(crewCapacity, presetTemplate.crew.crew)
		upgradeplan.crew.marine = L.getProportionateCount(crewCapacity, presetTemplate.crew.marines)
	end
	local droneCapacity = GetMacroUnitStorageCapacity(menu.macro)
	if droneCapacity > 0 then
		upgradeplan.drone.ship_gen_xs_cargodrone_empty_01_a_macro = L.getProportionateCount(droneCapacity, presetTemplate.drones.cargo)
		--upgradeplan.drone.ship_gen_s_miningdrone_solid_01_a_macro = L.getProportionateCount(droneCapacity, presetTemplate.drones.mining)
		--upgradeplan.drone.ship_gen_s_miningdrone_liquid_01_a_macro = L.getProportionateCount(droneCapacity, presetTemplate.drones.mining)
		upgradeplan.drone.ship_gen_s_fightingdrone_01_a_macro = L.getProportionateCount(droneCapacity, presetTemplate.drones.defence)
		upgradeplan.drone.ship_gen_xs_repairdrone_01_a_macro = L.getProportionateCount(droneCapacity, presetTemplate.drones.repair)
	end
	local deployCapacity = C.GetMacroDeployableCapacity(menu.macro)
	if deployCapacity > 0 then
		upgradeplan.deployable.eq_arg_satellite_02_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.advsatellite)
		upgradeplan.deployable.eq_arg_satellite_01_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.satellite)
		upgradeplan.deployable.env_deco_nav_beacon_t1_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.navbeacon)
		upgradeplan.deployable.eq_arg_resourceprobe_01_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.resprobe)
		upgradeplan.deployable.ship_gen_xs_lasertower_01_a_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.lastower1)
		upgradeplan.deployable.ship_gen_s_lasertower_01_a_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.lastower2)
		upgradeplan.deployable.weapon_gen_mine_03_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.ffmine)
		upgradeplan.deployable.weapon_gen_mine_01_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.mine)
		upgradeplan.deployable.weapon_gen_mine_02_macro = L.getProportionateCount(deployCapacity, presetTemplate.deployables.trackmine)
	end
	local counterCapacity = C.GetDefaultCountermeasureStorageCapacity(menu.macro)
	if counterCapacity > 0 then
		upgradeplan.countermeasure.countermeasure_flares_01_macro = L.getProportionateCount(counterCapacity, presetTemplate.countermeasure.flares)
	end
	--C.GetMacroMissileCapacity(currentmacro)

	return upgradeplan
end

function L.getProportionateCount(totalCapacity, preset)
	if not preset then
		return 0
	end
	return math.floor(totalCapacity * (preset / 100))
end

function L.chooseMacroByRules(menu, possiblemacros, rules)
	for _, rule in ipairs(rules) do
		local macro
		if rule.type == "exact" then
			macro = L.chooseMacroByExactRule(possiblemacros, rule)
		elseif rule.type == "auto" then
			macro = L.chooseMacroByAutoRule(menu, possiblemacros, rule)
		end
		if macro then
			return macro
		end
	end
	return nil
end

function L.chooseMacroByExactRule(possiblemacros, rule)
	if not rule.macro then
		return nil
	end
	for _, macro in ipairs(possiblemacros) do
		if macro == rule.macro then
			return macro
		end
	end
	return nil
end

function L.chooseMacroByAutoRule(menu, possiblemacros, rule)
	if not rule.race or not rule.value then
		return nil
	end

	-- First filter by race
	local filteredMacros = {}
	for _, macro in ipairs(possiblemacros) do
		local macroRaces, ware = GetMacroData(macro, "makerraceid", "ware")
		if rule.race or ArrayIndexOf(macroRaces, rule.race) then
			local tradelicence = GetWareData(ware, "tradelicence")
			if menu.isplayerowned or (not tradelicence) or tradelicence == "" or HasLicence("player", tradelicence, menu.containerowner) then
				table.insert(filteredMacros, { macro = macro })
			end
		end
	end
	if #filteredMacros == 0 then
		return nil
	end
	-- Now sort by price and choose by rule value
	for _, macro in ipairs(filteredMacros) do
		--[[local ware
		for _, w in ipairs(upgradewares) do
			if w.macro == macro.macro then
				ware = w.ware
				break
			end
		end--]]
		local ware = GetMacroData(macro.macro, "ware")
		if ware then
			local price = tonumber(C.GetBuildWarePrice(menu.container, ware))
			macro.price = price
		else
			macro.price = 0
		end
	end
	table.sort(filteredMacros, function (a, b) return a.price < b.price end)
	if rule.value == "low" then
		return filteredMacros[1].macro
	elseif rule.value == "medium" then
		return filteredMacros[math.floor(#filteredMacros / 2)].macro
	elseif rule.value == "high" then
		return filteredMacros[#filteredMacros].macro
	else
		return nil
	end
end

init()

return L